<?php
/**
 * PartnerData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Model;

use \ArrayAccess;
use \SnapTrade\ObjectSerializer;

/**
 * PartnerData Class Doc Comment
 *
 * @category Class
 * @description SnapTrade Partner metadata
 * @package  SnapTrade
 * @implements \ArrayAccess<string, mixed>
 */
class PartnerData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartnerData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redirect_uri' => 'string',
        'allowed_brokerages' => '\SnapTrade\Model\Brokerage[]',
        'name' => 'string',
        'slug' => 'string',
        'logo_url' => 'string',
        'pin_required' => 'bool',
        'can_access_trades' => 'bool',
        'can_access_holdings' => 'bool',
        'can_access_account_history' => 'bool',
        'can_access_reference_data' => 'bool',
        'can_access_portfolio_management' => 'bool',
        'can_access_orders' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redirect_uri' => null,
        'allowed_brokerages' => null,
        'name' => null,
        'slug' => null,
        'logo_url' => null,
        'pin_required' => null,
        'can_access_trades' => null,
        'can_access_holdings' => null,
        'can_access_account_history' => null,
        'can_access_reference_data' => null,
        'can_access_portfolio_management' => null,
        'can_access_orders' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redirect_uri' => false,
		'allowed_brokerages' => false,
		'name' => false,
		'slug' => false,
		'logo_url' => false,
		'pin_required' => false,
		'can_access_trades' => false,
		'can_access_holdings' => false,
		'can_access_account_history' => false,
		'can_access_reference_data' => false,
		'can_access_portfolio_management' => false,
		'can_access_orders' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirect_uri' => 'redirect_uri',
        'allowed_brokerages' => 'allowed_brokerages',
        'name' => 'name',
        'slug' => 'slug',
        'logo_url' => 'logo_url',
        'pin_required' => 'pin_required',
        'can_access_trades' => 'can_access_trades',
        'can_access_holdings' => 'can_access_holdings',
        'can_access_account_history' => 'can_access_account_history',
        'can_access_reference_data' => 'can_access_reference_data',
        'can_access_portfolio_management' => 'can_access_portfolio_management',
        'can_access_orders' => 'can_access_orders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirect_uri' => 'setRedirectUri',
        'allowed_brokerages' => 'setAllowedBrokerages',
        'name' => 'setName',
        'slug' => 'setSlug',
        'logo_url' => 'setLogoUrl',
        'pin_required' => 'setPinRequired',
        'can_access_trades' => 'setCanAccessTrades',
        'can_access_holdings' => 'setCanAccessHoldings',
        'can_access_account_history' => 'setCanAccessAccountHistory',
        'can_access_reference_data' => 'setCanAccessReferenceData',
        'can_access_portfolio_management' => 'setCanAccessPortfolioManagement',
        'can_access_orders' => 'setCanAccessOrders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirect_uri' => 'getRedirectUri',
        'allowed_brokerages' => 'getAllowedBrokerages',
        'name' => 'getName',
        'slug' => 'getSlug',
        'logo_url' => 'getLogoUrl',
        'pin_required' => 'getPinRequired',
        'can_access_trades' => 'getCanAccessTrades',
        'can_access_holdings' => 'getCanAccessHoldings',
        'can_access_account_history' => 'getCanAccessAccountHistory',
        'can_access_reference_data' => 'getCanAccessReferenceData',
        'can_access_portfolio_management' => 'getCanAccessPortfolioManagement',
        'can_access_orders' => 'getCanAccessOrders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('redirect_uri', $data ?? [], null);
        $this->setIfExists('allowed_brokerages', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('pin_required', $data ?? [], null);
        $this->setIfExists('can_access_trades', $data ?? [], null);
        $this->setIfExists('can_access_holdings', $data ?? [], null);
        $this->setIfExists('can_access_account_history', $data ?? [], null);
        $this->setIfExists('can_access_reference_data', $data ?? [], null);
        $this->setIfExists('can_access_portfolio_management', $data ?? [], null);
        $this->setIfExists('can_access_orders', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirect_uri
     *
     * @return string|null
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string|null $redirect_uri URI to redirect user back to after user is done adding brokerage connections
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {

        if (is_null($redirect_uri)) {
            throw new \InvalidArgumentException('non-nullable redirect_uri cannot be null');
        }

        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets allowed_brokerages
     *
     * @return \SnapTrade\Model\Brokerage[]|null
     */
    public function getAllowedBrokerages()
    {
        return $this->container['allowed_brokerages'];
    }

    /**
     * Sets allowed_brokerages
     *
     * @param \SnapTrade\Model\Brokerage[]|null $allowed_brokerages Brokerages that can be accessed by partners
     *
     * @return self
     */
    public function setAllowedBrokerages($allowed_brokerages)
    {

        if (is_null($allowed_brokerages)) {
            throw new \InvalidArgumentException('non-nullable allowed_brokerages cannot be null');
        }

        $this->container['allowed_brokerages'] = $allowed_brokerages;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of Snaptrade Partner
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug Slug of Snaptrade Partner
     *
     * @return self
     */
    public function setSlug($slug)
    {

        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url URL to partner's logo
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {

        if (is_null($logo_url)) {
            throw new \InvalidArgumentException('non-nullable logo_url cannot be null');
        }

        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets pin_required
     *
     * @return bool|null
     */
    public function getPinRequired()
    {
        return $this->container['pin_required'];
    }

    /**
     * Sets pin_required
     *
     * @param bool|null $pin_required Shows if pin is required by users to access connection page
     *
     * @return self
     */
    public function setPinRequired($pin_required)
    {

        if (is_null($pin_required)) {
            throw new \InvalidArgumentException('non-nullable pin_required cannot be null');
        }

        $this->container['pin_required'] = $pin_required;

        return $this;
    }

    /**
     * Gets can_access_trades
     *
     * @return bool|null
     */
    public function getCanAccessTrades()
    {
        return $this->container['can_access_trades'];
    }

    /**
     * Sets can_access_trades
     *
     * @param bool|null $can_access_trades Shows if users of Snaptrade partners can access trade endpoints
     *
     * @return self
     */
    public function setCanAccessTrades($can_access_trades)
    {

        if (is_null($can_access_trades)) {
            throw new \InvalidArgumentException('non-nullable can_access_trades cannot be null');
        }

        $this->container['can_access_trades'] = $can_access_trades;

        return $this;
    }

    /**
     * Gets can_access_holdings
     *
     * @return bool|null
     */
    public function getCanAccessHoldings()
    {
        return $this->container['can_access_holdings'];
    }

    /**
     * Sets can_access_holdings
     *
     * @param bool|null $can_access_holdings Shows if Snaptrade partners can get user holdings data
     *
     * @return self
     */
    public function setCanAccessHoldings($can_access_holdings)
    {

        if (is_null($can_access_holdings)) {
            throw new \InvalidArgumentException('non-nullable can_access_holdings cannot be null');
        }

        $this->container['can_access_holdings'] = $can_access_holdings;

        return $this;
    }

    /**
     * Gets can_access_account_history
     *
     * @return bool|null
     */
    public function getCanAccessAccountHistory()
    {
        return $this->container['can_access_account_history'];
    }

    /**
     * Sets can_access_account_history
     *
     * @param bool|null $can_access_account_history Shows if Snaptrade partners can get users account history data
     *
     * @return self
     */
    public function setCanAccessAccountHistory($can_access_account_history)
    {

        if (is_null($can_access_account_history)) {
            throw new \InvalidArgumentException('non-nullable can_access_account_history cannot be null');
        }

        $this->container['can_access_account_history'] = $can_access_account_history;

        return $this;
    }

    /**
     * Gets can_access_reference_data
     *
     * @return bool|null
     */
    public function getCanAccessReferenceData()
    {
        return $this->container['can_access_reference_data'];
    }

    /**
     * Sets can_access_reference_data
     *
     * @param bool|null $can_access_reference_data Shows if Snaptrade partners can get users holdings data
     *
     * @return self
     */
    public function setCanAccessReferenceData($can_access_reference_data)
    {

        if (is_null($can_access_reference_data)) {
            throw new \InvalidArgumentException('non-nullable can_access_reference_data cannot be null');
        }

        $this->container['can_access_reference_data'] = $can_access_reference_data;

        return $this;
    }

    /**
     * Gets can_access_portfolio_management
     *
     * @return bool|null
     */
    public function getCanAccessPortfolioManagement()
    {
        return $this->container['can_access_portfolio_management'];
    }

    /**
     * Sets can_access_portfolio_management
     *
     * @param bool|null $can_access_portfolio_management Shows if users Snaptrade partners can access portfolio group management features
     *
     * @return self
     */
    public function setCanAccessPortfolioManagement($can_access_portfolio_management)
    {

        if (is_null($can_access_portfolio_management)) {
            throw new \InvalidArgumentException('non-nullable can_access_portfolio_management cannot be null');
        }

        $this->container['can_access_portfolio_management'] = $can_access_portfolio_management;

        return $this;
    }

    /**
     * Gets can_access_orders
     *
     * @return bool|null
     */
    public function getCanAccessOrders()
    {
        return $this->container['can_access_orders'];
    }

    /**
     * Sets can_access_orders
     *
     * @param bool|null $can_access_orders Shows if Snaptrade partners can get users account order history
     *
     * @return self
     */
    public function setCanAccessOrders($can_access_orders)
    {

        if (is_null($can_access_orders)) {
            throw new \InvalidArgumentException('non-nullable can_access_orders cannot be null');
        }

        $this->container['can_access_orders'] = $can_access_orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


