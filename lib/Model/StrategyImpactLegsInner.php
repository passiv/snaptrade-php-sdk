<?php
/**
 * StrategyImpactLegsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Model;

use \ArrayAccess;
use \SnapTrade\ObjectSerializer;

/**
 * StrategyImpactLegsInner Class Doc Comment
 *
 * @category Class
 * @package  SnapTrade
 * @implements \ArrayAccess<string, mixed>
 */
class StrategyImpactLegsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StrategyImpact_legs_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'leg_id' => 'int',
        'symbol' => 'string',
        'symbol_id' => 'int',
        'leg_ratio_quantity' => 'int',
        'side' => 'string',
        'avg_exec_price' => 'string',
        'last_exec_price' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'leg_id' => 'int32',
        'symbol' => null,
        'symbol_id' => 'int32',
        'leg_ratio_quantity' => 'int32',
        'side' => null,
        'avg_exec_price' => 'nullable',
        'last_exec_price' => 'nullable'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'leg_id' => false,
		'symbol' => false,
		'symbol_id' => false,
		'leg_ratio_quantity' => false,
		'side' => false,
		'avg_exec_price' => false,
		'last_exec_price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'leg_id' => 'legId',
        'symbol' => 'symbol',
        'symbol_id' => 'symbolId',
        'leg_ratio_quantity' => 'legRatioQuantity',
        'side' => 'side',
        'avg_exec_price' => 'avgExecPrice',
        'last_exec_price' => 'lastExecPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'leg_id' => 'setLegId',
        'symbol' => 'setSymbol',
        'symbol_id' => 'setSymbolId',
        'leg_ratio_quantity' => 'setLegRatioQuantity',
        'side' => 'setSide',
        'avg_exec_price' => 'setAvgExecPrice',
        'last_exec_price' => 'setLastExecPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'leg_id' => 'getLegId',
        'symbol' => 'getSymbol',
        'symbol_id' => 'getSymbolId',
        'leg_ratio_quantity' => 'getLegRatioQuantity',
        'side' => 'getSide',
        'avg_exec_price' => 'getAvgExecPrice',
        'last_exec_price' => 'getLastExecPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('leg_id', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('symbol_id', $data ?? [], null);
        $this->setIfExists('leg_ratio_quantity', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('avg_exec_price', $data ?? [], null);
        $this->setIfExists('last_exec_price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets leg_id
     *
     * @return int|null
     */
    public function getLegId()
    {
        return $this->container['leg_id'];
    }

    /**
     * Sets leg_id
     *
     * @param int|null $leg_id leg_id
     *
     * @return self
     */
    public function setLegId($leg_id)
    {

        if (is_null($leg_id)) {
            throw new \InvalidArgumentException('non-nullable leg_id cannot be null');
        }

        $this->container['leg_id'] = $leg_id;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {

        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets symbol_id
     *
     * @return int|null
     */
    public function getSymbolId()
    {
        return $this->container['symbol_id'];
    }

    /**
     * Sets symbol_id
     *
     * @param int|null $symbol_id symbol_id
     *
     * @return self
     */
    public function setSymbolId($symbol_id)
    {

        if (is_null($symbol_id)) {
            throw new \InvalidArgumentException('non-nullable symbol_id cannot be null');
        }

        $this->container['symbol_id'] = $symbol_id;

        return $this;
    }

    /**
     * Gets leg_ratio_quantity
     *
     * @return int|null
     */
    public function getLegRatioQuantity()
    {
        return $this->container['leg_ratio_quantity'];
    }

    /**
     * Sets leg_ratio_quantity
     *
     * @param int|null $leg_ratio_quantity leg_ratio_quantity
     *
     * @return self
     */
    public function setLegRatioQuantity($leg_ratio_quantity)
    {

        if (is_null($leg_ratio_quantity)) {
            throw new \InvalidArgumentException('non-nullable leg_ratio_quantity cannot be null');
        }

        $this->container['leg_ratio_quantity'] = $leg_ratio_quantity;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string|null
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string|null $side side
     *
     * @return self
     */
    public function setSide($side)
    {

        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }

        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets avg_exec_price
     *
     * @return string|null
     */
    public function getAvgExecPrice()
    {
        return $this->container['avg_exec_price'];
    }

    /**
     * Sets avg_exec_price
     *
     * @param string|null $avg_exec_price avg_exec_price
     *
     * @return self
     */
    public function setAvgExecPrice($avg_exec_price)
    {

        if (is_null($avg_exec_price)) {
            throw new \InvalidArgumentException('non-nullable avg_exec_price cannot be null');
        }

        $this->container['avg_exec_price'] = $avg_exec_price;

        return $this;
    }

    /**
     * Gets last_exec_price
     *
     * @return string|null
     */
    public function getLastExecPrice()
    {
        return $this->container['last_exec_price'];
    }

    /**
     * Sets last_exec_price
     *
     * @param string|null $last_exec_price last_exec_price
     *
     * @return self
     */
    public function setLastExecPrice($last_exec_price)
    {

        if (is_null($last_exec_price)) {
            throw new \InvalidArgumentException('non-nullable last_exec_price cannot be null');
        }

        $this->container['last_exec_price'] = $last_exec_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


