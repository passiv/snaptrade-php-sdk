<?php
/**
 * TradingApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Test\Api;

use \SnapTrade\Configuration;
use \SnapTrade\ApiException;
use \SnapTrade\ObjectSerializer;
use PHPUnit\Framework\TestCase;

class TradingApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelOrder
     *
     * Cancel order.
     *
     */
    public function testCancelOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cancelUserAccountOrder
     *
     * Cancel equity order.
     *
     */
    public function testCancelUserAccountOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCryptocurrencyPairQuote
     *
     * Get crypto pair quote.
     *
     */
    public function testGetCryptocurrencyPairQuote()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderImpact
     *
     * Check equity order impact.
     *
     */
    public function testGetOrderImpact()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUserAccountQuotes
     *
     * Get equity symbol quotes.
     *
     */
    public function testGetUserAccountQuotes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for placeBracketOrder
     *
     * Place bracket order.
     *
     */
    public function testPlaceBracketOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for placeCryptoOrder
     *
     * Place crypto order.
     *
     */
    public function testPlaceCryptoOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for placeForceOrder
     *
     * Place order.
     *
     */
    public function testPlaceForceOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for placeMlegOrder
     *
     * Place option order.
     *
     */
    public function testPlaceMlegOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for placeOrder
     *
     * Place checked equity order.
     *
     */
    public function testPlaceOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for previewCryptoOrder
     *
     * Preview crypto order.
     *
     */
    public function testPreviewCryptoOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for replaceOrder
     *
     * Replace order.
     *
     */
    public function testReplaceOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchCryptocurrencyPairInstruments
     *
     * Get crypto pairs.
     *
     */
    public function testSearchCryptocurrencyPairInstruments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
