<?php
/**
 * PerformanceCustom
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Model;

use \ArrayAccess;
use \SnapTrade\ObjectSerializer;

/**
 * PerformanceCustom Class Doc Comment
 *
 * @category Class
 * @description Performance Custom Response Object
 * @package  SnapTrade
 * @implements \ArrayAccess<string, mixed>
 */
class PerformanceCustom implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PerformanceCustom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_equity_timeframe' => '\SnapTrade\Model\PastValue[]',
        'contributions' => '\SnapTrade\Model\NetContributions',
        'contribution_timeframe' => '\SnapTrade\Model\PastValue[]',
        'contribution_timeframe_cumulative' => '\SnapTrade\Model\PastValue[]',
        'withdrawal_timeframe' => '\SnapTrade\Model\PastValue[]',
        'contribution_streak' => 'float',
        'contribution_months_contributed' => 'float',
        'contribution_total_months' => 'float',
        'dividends' => '\SnapTrade\Model\NetDividend[]',
        'dividend_income' => 'float',
        'monthly_dividends' => 'float',
        'bad_tickers' => 'string[]',
        'dividend_timeline' => '\SnapTrade\Model\MonthlyDividends[]',
        'commissions' => 'float',
        'forex_fees' => 'float',
        'fees' => 'float',
        'rate_of_return' => 'float',
        'return_rate_timeframe' => '\SnapTrade\Model\SubPeriodReturnRate[]',
        'detailed_mode' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_equity_timeframe' => null,
        'contributions' => null,
        'contribution_timeframe' => null,
        'contribution_timeframe_cumulative' => null,
        'withdrawal_timeframe' => null,
        'contribution_streak' => null,
        'contribution_months_contributed' => null,
        'contribution_total_months' => null,
        'dividends' => null,
        'dividend_income' => null,
        'monthly_dividends' => null,
        'bad_tickers' => null,
        'dividend_timeline' => null,
        'commissions' => null,
        'forex_fees' => null,
        'fees' => null,
        'rate_of_return' => null,
        'return_rate_timeframe' => null,
        'detailed_mode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_equity_timeframe' => false,
		'contributions' => false,
		'contribution_timeframe' => false,
		'contribution_timeframe_cumulative' => false,
		'withdrawal_timeframe' => false,
		'contribution_streak' => true,
		'contribution_months_contributed' => true,
		'contribution_total_months' => true,
		'dividends' => false,
		'dividend_income' => true,
		'monthly_dividends' => true,
		'bad_tickers' => false,
		'dividend_timeline' => false,
		'commissions' => true,
		'forex_fees' => true,
		'fees' => true,
		'rate_of_return' => true,
		'return_rate_timeframe' => false,
		'detailed_mode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_equity_timeframe' => 'totalEquityTimeframe',
        'contributions' => 'contributions',
        'contribution_timeframe' => 'contributionTimeframe',
        'contribution_timeframe_cumulative' => 'contributionTimeframeCumulative',
        'withdrawal_timeframe' => 'withdrawalTimeframe',
        'contribution_streak' => 'contributionStreak',
        'contribution_months_contributed' => 'contributionMonthsContributed',
        'contribution_total_months' => 'contributionTotalMonths',
        'dividends' => 'dividends',
        'dividend_income' => 'dividendIncome',
        'monthly_dividends' => 'monthlyDividends',
        'bad_tickers' => 'badTickers',
        'dividend_timeline' => 'dividendTimeline',
        'commissions' => 'commissions',
        'forex_fees' => 'forexFees',
        'fees' => 'fees',
        'rate_of_return' => 'rateOfReturn',
        'return_rate_timeframe' => 'returnRateTimeframe',
        'detailed_mode' => 'detailedMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_equity_timeframe' => 'setTotalEquityTimeframe',
        'contributions' => 'setContributions',
        'contribution_timeframe' => 'setContributionTimeframe',
        'contribution_timeframe_cumulative' => 'setContributionTimeframeCumulative',
        'withdrawal_timeframe' => 'setWithdrawalTimeframe',
        'contribution_streak' => 'setContributionStreak',
        'contribution_months_contributed' => 'setContributionMonthsContributed',
        'contribution_total_months' => 'setContributionTotalMonths',
        'dividends' => 'setDividends',
        'dividend_income' => 'setDividendIncome',
        'monthly_dividends' => 'setMonthlyDividends',
        'bad_tickers' => 'setBadTickers',
        'dividend_timeline' => 'setDividendTimeline',
        'commissions' => 'setCommissions',
        'forex_fees' => 'setForexFees',
        'fees' => 'setFees',
        'rate_of_return' => 'setRateOfReturn',
        'return_rate_timeframe' => 'setReturnRateTimeframe',
        'detailed_mode' => 'setDetailedMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_equity_timeframe' => 'getTotalEquityTimeframe',
        'contributions' => 'getContributions',
        'contribution_timeframe' => 'getContributionTimeframe',
        'contribution_timeframe_cumulative' => 'getContributionTimeframeCumulative',
        'withdrawal_timeframe' => 'getWithdrawalTimeframe',
        'contribution_streak' => 'getContributionStreak',
        'contribution_months_contributed' => 'getContributionMonthsContributed',
        'contribution_total_months' => 'getContributionTotalMonths',
        'dividends' => 'getDividends',
        'dividend_income' => 'getDividendIncome',
        'monthly_dividends' => 'getMonthlyDividends',
        'bad_tickers' => 'getBadTickers',
        'dividend_timeline' => 'getDividendTimeline',
        'commissions' => 'getCommissions',
        'forex_fees' => 'getForexFees',
        'fees' => 'getFees',
        'rate_of_return' => 'getRateOfReturn',
        'return_rate_timeframe' => 'getReturnRateTimeframe',
        'detailed_mode' => 'getDetailedMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_equity_timeframe', $data ?? [], null);
        $this->setIfExists('contributions', $data ?? [], null);
        $this->setIfExists('contribution_timeframe', $data ?? [], null);
        $this->setIfExists('contribution_timeframe_cumulative', $data ?? [], null);
        $this->setIfExists('withdrawal_timeframe', $data ?? [], null);
        $this->setIfExists('contribution_streak', $data ?? [], null);
        $this->setIfExists('contribution_months_contributed', $data ?? [], null);
        $this->setIfExists('contribution_total_months', $data ?? [], null);
        $this->setIfExists('dividends', $data ?? [], null);
        $this->setIfExists('dividend_income', $data ?? [], null);
        $this->setIfExists('monthly_dividends', $data ?? [], null);
        $this->setIfExists('bad_tickers', $data ?? [], null);
        $this->setIfExists('dividend_timeline', $data ?? [], null);
        $this->setIfExists('commissions', $data ?? [], null);
        $this->setIfExists('forex_fees', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('rate_of_return', $data ?? [], null);
        $this->setIfExists('return_rate_timeframe', $data ?? [], null);
        $this->setIfExists('detailed_mode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_equity_timeframe
     *
     * @return \SnapTrade\Model\PastValue[]|null
     */
    public function getTotalEquityTimeframe()
    {
        return $this->container['total_equity_timeframe'];
    }

    /**
     * Sets total_equity_timeframe
     *
     * @param \SnapTrade\Model\PastValue[]|null $total_equity_timeframe total_equity_timeframe
     *
     * @return self
     */
    public function setTotalEquityTimeframe($total_equity_timeframe)
    {

        if (is_null($total_equity_timeframe)) {
            throw new \InvalidArgumentException('non-nullable total_equity_timeframe cannot be null');
        }

        $this->container['total_equity_timeframe'] = $total_equity_timeframe;

        return $this;
    }

    /**
     * Gets contributions
     *
     * @return \SnapTrade\Model\NetContributions|null
     */
    public function getContributions()
    {
        return $this->container['contributions'];
    }

    /**
     * Sets contributions
     *
     * @param \SnapTrade\Model\NetContributions|null $contributions contributions
     *
     * @return self
     */
    public function setContributions($contributions)
    {

        if (is_null($contributions)) {
            throw new \InvalidArgumentException('non-nullable contributions cannot be null');
        }

        $this->container['contributions'] = $contributions;

        return $this;
    }

    /**
     * Gets contribution_timeframe
     *
     * @return \SnapTrade\Model\PastValue[]|null
     */
    public function getContributionTimeframe()
    {
        return $this->container['contribution_timeframe'];
    }

    /**
     * Sets contribution_timeframe
     *
     * @param \SnapTrade\Model\PastValue[]|null $contribution_timeframe contribution_timeframe
     *
     * @return self
     */
    public function setContributionTimeframe($contribution_timeframe)
    {

        if (is_null($contribution_timeframe)) {
            throw new \InvalidArgumentException('non-nullable contribution_timeframe cannot be null');
        }

        $this->container['contribution_timeframe'] = $contribution_timeframe;

        return $this;
    }

    /**
     * Gets contribution_timeframe_cumulative
     *
     * @return \SnapTrade\Model\PastValue[]|null
     */
    public function getContributionTimeframeCumulative()
    {
        return $this->container['contribution_timeframe_cumulative'];
    }

    /**
     * Sets contribution_timeframe_cumulative
     *
     * @param \SnapTrade\Model\PastValue[]|null $contribution_timeframe_cumulative contribution_timeframe_cumulative
     *
     * @return self
     */
    public function setContributionTimeframeCumulative($contribution_timeframe_cumulative)
    {

        if (is_null($contribution_timeframe_cumulative)) {
            throw new \InvalidArgumentException('non-nullable contribution_timeframe_cumulative cannot be null');
        }

        $this->container['contribution_timeframe_cumulative'] = $contribution_timeframe_cumulative;

        return $this;
    }

    /**
     * Gets withdrawal_timeframe
     *
     * @return \SnapTrade\Model\PastValue[]|null
     */
    public function getWithdrawalTimeframe()
    {
        return $this->container['withdrawal_timeframe'];
    }

    /**
     * Sets withdrawal_timeframe
     *
     * @param \SnapTrade\Model\PastValue[]|null $withdrawal_timeframe withdrawal_timeframe
     *
     * @return self
     */
    public function setWithdrawalTimeframe($withdrawal_timeframe)
    {

        if (is_null($withdrawal_timeframe)) {
            throw new \InvalidArgumentException('non-nullable withdrawal_timeframe cannot be null');
        }

        $this->container['withdrawal_timeframe'] = $withdrawal_timeframe;

        return $this;
    }

    /**
     * Gets contribution_streak
     *
     * @return float|null
     */
    public function getContributionStreak()
    {
        return $this->container['contribution_streak'];
    }

    /**
     * Sets contribution_streak
     *
     * @param float|null $contribution_streak Current streak of cosecutive months where contributions were made
     *
     * @return self
     */
    public function setContributionStreak($contribution_streak)
    {

        if (is_null($contribution_streak)) {
            array_push($this->openAPINullablesSetToNull, 'contribution_streak');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contribution_streak', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['contribution_streak'] = $contribution_streak;

        return $this;
    }

    /**
     * Gets contribution_months_contributed
     *
     * @return float|null
     */
    public function getContributionMonthsContributed()
    {
        return $this->container['contribution_months_contributed'];
    }

    /**
     * Sets contribution_months_contributed
     *
     * @param float|null $contribution_months_contributed Number of months in the timeframe with contributions
     *
     * @return self
     */
    public function setContributionMonthsContributed($contribution_months_contributed)
    {

        if (is_null($contribution_months_contributed)) {
            array_push($this->openAPINullablesSetToNull, 'contribution_months_contributed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contribution_months_contributed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['contribution_months_contributed'] = $contribution_months_contributed;

        return $this;
    }

    /**
     * Gets contribution_total_months
     *
     * @return float|null
     */
    public function getContributionTotalMonths()
    {
        return $this->container['contribution_total_months'];
    }

    /**
     * Sets contribution_total_months
     *
     * @param float|null $contribution_total_months Total months in timeframe
     *
     * @return self
     */
    public function setContributionTotalMonths($contribution_total_months)
    {

        if (is_null($contribution_total_months)) {
            array_push($this->openAPINullablesSetToNull, 'contribution_total_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contribution_total_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['contribution_total_months'] = $contribution_total_months;

        return $this;
    }

    /**
     * Gets dividends
     *
     * @return \SnapTrade\Model\NetDividend[]|null
     */
    public function getDividends()
    {
        return $this->container['dividends'];
    }

    /**
     * Sets dividends
     *
     * @param \SnapTrade\Model\NetDividend[]|null $dividends dividends
     *
     * @return self
     */
    public function setDividends($dividends)
    {

        if (is_null($dividends)) {
            throw new \InvalidArgumentException('non-nullable dividends cannot be null');
        }

        $this->container['dividends'] = $dividends;

        return $this;
    }

    /**
     * Gets dividend_income
     *
     * @return float|null
     */
    public function getDividendIncome()
    {
        return $this->container['dividend_income'];
    }

    /**
     * Sets dividend_income
     *
     * @param float|null $dividend_income Total dividends received over the timeframe
     *
     * @return self
     */
    public function setDividendIncome($dividend_income)
    {

        if (is_null($dividend_income)) {
            array_push($this->openAPINullablesSetToNull, 'dividend_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dividend_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['dividend_income'] = $dividend_income;

        return $this;
    }

    /**
     * Gets monthly_dividends
     *
     * @return float|null
     */
    public function getMonthlyDividends()
    {
        return $this->container['monthly_dividends'];
    }

    /**
     * Sets monthly_dividends
     *
     * @param float|null $monthly_dividends Average dividends received per month over the timeframe
     *
     * @return self
     */
    public function setMonthlyDividends($monthly_dividends)
    {

        if (is_null($monthly_dividends)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_dividends');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_dividends', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['monthly_dividends'] = $monthly_dividends;

        return $this;
    }

    /**
     * Gets bad_tickers
     *
     * @return string[]|null
     */
    public function getBadTickers()
    {
        return $this->container['bad_tickers'];
    }

    /**
     * Sets bad_tickers
     *
     * @param string[]|null $bad_tickers list of tickers which may not be supported or may not have accurate price data
     *
     * @return self
     */
    public function setBadTickers($bad_tickers)
    {

        if (is_null($bad_tickers)) {
            throw new \InvalidArgumentException('non-nullable bad_tickers cannot be null');
        }

        $this->container['bad_tickers'] = $bad_tickers;

        return $this;
    }

    /**
     * Gets dividend_timeline
     *
     * @return \SnapTrade\Model\MonthlyDividends[]|null
     */
    public function getDividendTimeline()
    {
        return $this->container['dividend_timeline'];
    }

    /**
     * Sets dividend_timeline
     *
     * @param \SnapTrade\Model\MonthlyDividends[]|null $dividend_timeline dividend_timeline
     *
     * @return self
     */
    public function setDividendTimeline($dividend_timeline)
    {

        if (is_null($dividend_timeline)) {
            throw new \InvalidArgumentException('non-nullable dividend_timeline cannot be null');
        }

        $this->container['dividend_timeline'] = $dividend_timeline;

        return $this;
    }

    /**
     * Gets commissions
     *
     * @return float|null
     */
    public function getCommissions()
    {
        return $this->container['commissions'];
    }

    /**
     * Sets commissions
     *
     * @param float|null $commissions commissions incurred during the timeframe
     *
     * @return self
     */
    public function setCommissions($commissions)
    {

        if (is_null($commissions)) {
            array_push($this->openAPINullablesSetToNull, 'commissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['commissions'] = $commissions;

        return $this;
    }

    /**
     * Gets forex_fees
     *
     * @return float|null
     */
    public function getForexFees()
    {
        return $this->container['forex_fees'];
    }

    /**
     * Sets forex_fees
     *
     * @param float|null $forex_fees forex fees incurred during the timeframe
     *
     * @return self
     */
    public function setForexFees($forex_fees)
    {

        if (is_null($forex_fees)) {
            array_push($this->openAPINullablesSetToNull, 'forex_fees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forex_fees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['forex_fees'] = $forex_fees;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return float|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param float|null $fees other fees incurred during the timeframe
     *
     * @return self
     */
    public function setFees($fees)
    {

        if (is_null($fees)) {
            array_push($this->openAPINullablesSetToNull, 'fees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets rate_of_return
     *
     * @return float|null
     */
    public function getRateOfReturn()
    {
        return $this->container['rate_of_return'];
    }

    /**
     * Sets rate_of_return
     *
     * @param float|null $rate_of_return The return rate over the timeframe. Annualized if timeframe is longer than 1 year
     *
     * @return self
     */
    public function setRateOfReturn($rate_of_return)
    {

        if (is_null($rate_of_return)) {
            array_push($this->openAPINullablesSetToNull, 'rate_of_return');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_of_return', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['rate_of_return'] = $rate_of_return;

        return $this;
    }

    /**
     * Gets return_rate_timeframe
     *
     * @return \SnapTrade\Model\SubPeriodReturnRate[]|null
     */
    public function getReturnRateTimeframe()
    {
        return $this->container['return_rate_timeframe'];
    }

    /**
     * Sets return_rate_timeframe
     *
     * @param \SnapTrade\Model\SubPeriodReturnRate[]|null $return_rate_timeframe return_rate_timeframe
     *
     * @return self
     */
    public function setReturnRateTimeframe($return_rate_timeframe)
    {

        if (is_null($return_rate_timeframe)) {
            throw new \InvalidArgumentException('non-nullable return_rate_timeframe cannot be null');
        }

        $this->container['return_rate_timeframe'] = $return_rate_timeframe;

        return $this;
    }

    /**
     * Gets detailed_mode
     *
     * @return bool|null
     */
    public function getDetailedMode()
    {
        return $this->container['detailed_mode'];
    }

    /**
     * Sets detailed_mode
     *
     * @param bool|null $detailed_mode Whether the user has detailed mode enabled (more frequent data points for totalEquity and contribution timeframes)
     *
     * @return self
     */
    public function setDetailedMode($detailed_mode)
    {

        if (is_null($detailed_mode)) {
            throw new \InvalidArgumentException('non-nullable detailed_mode cannot be null');
        }

        $this->container['detailed_mode'] = $detailed_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


