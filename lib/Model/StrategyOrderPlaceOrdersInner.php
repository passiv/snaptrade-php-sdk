<?php
/**
 * StrategyOrderPlaceOrdersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Model;

use \ArrayAccess;
use \SnapTrade\ObjectSerializer;

/**
 * StrategyOrderPlaceOrdersInner Class Doc Comment
 *
 * @category Class
 * @package  SnapTrade
 * @implements \ArrayAccess<string, mixed>
 */
class StrategyOrderPlaceOrdersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StrategyOrderPlace_orders_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'symbol' => 'string',
        'symbol_id' => 'int',
        'total_quantity' => 'int',
        'open_quantity' => 'int',
        'filled_quantity' => 'int',
        'canceled_quantity' => 'int',
        'side' => 'string',
        'order_type' => 'string',
        'limit_price' => 'string',
        'stop_price' => 'string',
        'is_all_or_none' => 'bool',
        'is_anonymous' => 'bool',
        'iceberg_quantity' => 'string',
        'min_quantity' => 'string',
        'avg_exec_price' => 'int',
        'last_exec_price' => 'string',
        'source' => 'string',
        'time_in_force' => 'string',
        'gtd_date' => 'string',
        'state' => 'string',
        'rejection_reason' => 'string',
        'chain_id' => 'int',
        'creation_time' => 'string',
        'update_time' => 'string',
        'notes' => 'string',
        'primary_route' => 'string',
        'secondary_route' => 'string',
        'order_route' => 'string',
        'venue_holding_order' => 'string',
        'comission_charged' => 'int',
        'exchange_order_id' => 'string',
        'is_significant_share_holder' => 'bool',
        'is_insider' => 'bool',
        'is_limit_offset_in_dollar' => 'bool',
        'user_id' => 'int',
        'placement_commission' => 'string',
        'legs' => '\SnapTrade\Model\StrategyOrderPlaceOrdersInnerLegsInner[]',
        'strategy_type' => 'string',
        'trigger_stop_price' => 'string',
        'order_group_id' => 'int',
        'order_class' => 'string',
        'is_cross_zero' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'symbol' => null,
        'symbol_id' => 'int32',
        'total_quantity' => 'int32',
        'open_quantity' => 'int32',
        'filled_quantity' => 'int32',
        'canceled_quantity' => 'int32',
        'side' => null,
        'order_type' => null,
        'limit_price' => 'nullable',
        'stop_price' => 'nullable',
        'is_all_or_none' => null,
        'is_anonymous' => null,
        'iceberg_quantity' => 'nullable',
        'min_quantity' => 'nullable',
        'avg_exec_price' => 'int32',
        'last_exec_price' => 'nullable',
        'source' => null,
        'time_in_force' => null,
        'gtd_date' => 'nullable',
        'state' => null,
        'rejection_reason' => null,
        'chain_id' => 'int32',
        'creation_time' => null,
        'update_time' => null,
        'notes' => null,
        'primary_route' => null,
        'secondary_route' => null,
        'order_route' => null,
        'venue_holding_order' => null,
        'comission_charged' => 'int32',
        'exchange_order_id' => null,
        'is_significant_share_holder' => null,
        'is_insider' => null,
        'is_limit_offset_in_dollar' => null,
        'user_id' => 'int32',
        'placement_commission' => 'nullable',
        'legs' => null,
        'strategy_type' => null,
        'trigger_stop_price' => 'nullable',
        'order_group_id' => 'int32',
        'order_class' => 'nullable',
        'is_cross_zero' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'symbol' => false,
		'symbol_id' => false,
		'total_quantity' => false,
		'open_quantity' => false,
		'filled_quantity' => false,
		'canceled_quantity' => false,
		'side' => false,
		'order_type' => false,
		'limit_price' => false,
		'stop_price' => false,
		'is_all_or_none' => false,
		'is_anonymous' => false,
		'iceberg_quantity' => false,
		'min_quantity' => false,
		'avg_exec_price' => false,
		'last_exec_price' => false,
		'source' => false,
		'time_in_force' => false,
		'gtd_date' => false,
		'state' => false,
		'rejection_reason' => false,
		'chain_id' => false,
		'creation_time' => false,
		'update_time' => false,
		'notes' => false,
		'primary_route' => false,
		'secondary_route' => false,
		'order_route' => false,
		'venue_holding_order' => false,
		'comission_charged' => false,
		'exchange_order_id' => false,
		'is_significant_share_holder' => false,
		'is_insider' => false,
		'is_limit_offset_in_dollar' => false,
		'user_id' => false,
		'placement_commission' => false,
		'legs' => false,
		'strategy_type' => false,
		'trigger_stop_price' => false,
		'order_group_id' => false,
		'order_class' => false,
		'is_cross_zero' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'symbol' => 'symbol',
        'symbol_id' => 'symbolId',
        'total_quantity' => 'totalQuantity',
        'open_quantity' => 'openQuantity',
        'filled_quantity' => 'filledQuantity',
        'canceled_quantity' => 'canceledQuantity',
        'side' => 'side',
        'order_type' => 'orderType',
        'limit_price' => 'limitPrice',
        'stop_price' => 'stopPrice',
        'is_all_or_none' => 'isAllOrNone',
        'is_anonymous' => 'isAnonymous',
        'iceberg_quantity' => 'icebergQuantity',
        'min_quantity' => 'minQuantity',
        'avg_exec_price' => 'avgExecPrice',
        'last_exec_price' => 'lastExecPrice',
        'source' => 'source',
        'time_in_force' => 'timeInForce',
        'gtd_date' => 'gtdDate',
        'state' => 'state',
        'rejection_reason' => 'rejectionReason',
        'chain_id' => 'chainId',
        'creation_time' => 'creationTime',
        'update_time' => 'updateTime',
        'notes' => 'notes',
        'primary_route' => 'primaryRoute',
        'secondary_route' => 'secondaryRoute',
        'order_route' => 'orderRoute',
        'venue_holding_order' => 'venueHoldingOrder',
        'comission_charged' => 'comissionCharged',
        'exchange_order_id' => 'exchangeOrderId',
        'is_significant_share_holder' => 'isSignificantShareHolder',
        'is_insider' => 'isInsider',
        'is_limit_offset_in_dollar' => 'isLimitOffsetInDollar',
        'user_id' => 'userId',
        'placement_commission' => 'placementCommission',
        'legs' => 'legs',
        'strategy_type' => 'strategyType',
        'trigger_stop_price' => 'triggerStopPrice',
        'order_group_id' => 'orderGroupId',
        'order_class' => 'orderClass',
        'is_cross_zero' => 'isCrossZero'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'symbol' => 'setSymbol',
        'symbol_id' => 'setSymbolId',
        'total_quantity' => 'setTotalQuantity',
        'open_quantity' => 'setOpenQuantity',
        'filled_quantity' => 'setFilledQuantity',
        'canceled_quantity' => 'setCanceledQuantity',
        'side' => 'setSide',
        'order_type' => 'setOrderType',
        'limit_price' => 'setLimitPrice',
        'stop_price' => 'setStopPrice',
        'is_all_or_none' => 'setIsAllOrNone',
        'is_anonymous' => 'setIsAnonymous',
        'iceberg_quantity' => 'setIcebergQuantity',
        'min_quantity' => 'setMinQuantity',
        'avg_exec_price' => 'setAvgExecPrice',
        'last_exec_price' => 'setLastExecPrice',
        'source' => 'setSource',
        'time_in_force' => 'setTimeInForce',
        'gtd_date' => 'setGtdDate',
        'state' => 'setState',
        'rejection_reason' => 'setRejectionReason',
        'chain_id' => 'setChainId',
        'creation_time' => 'setCreationTime',
        'update_time' => 'setUpdateTime',
        'notes' => 'setNotes',
        'primary_route' => 'setPrimaryRoute',
        'secondary_route' => 'setSecondaryRoute',
        'order_route' => 'setOrderRoute',
        'venue_holding_order' => 'setVenueHoldingOrder',
        'comission_charged' => 'setComissionCharged',
        'exchange_order_id' => 'setExchangeOrderId',
        'is_significant_share_holder' => 'setIsSignificantShareHolder',
        'is_insider' => 'setIsInsider',
        'is_limit_offset_in_dollar' => 'setIsLimitOffsetInDollar',
        'user_id' => 'setUserId',
        'placement_commission' => 'setPlacementCommission',
        'legs' => 'setLegs',
        'strategy_type' => 'setStrategyType',
        'trigger_stop_price' => 'setTriggerStopPrice',
        'order_group_id' => 'setOrderGroupId',
        'order_class' => 'setOrderClass',
        'is_cross_zero' => 'setIsCrossZero'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'symbol' => 'getSymbol',
        'symbol_id' => 'getSymbolId',
        'total_quantity' => 'getTotalQuantity',
        'open_quantity' => 'getOpenQuantity',
        'filled_quantity' => 'getFilledQuantity',
        'canceled_quantity' => 'getCanceledQuantity',
        'side' => 'getSide',
        'order_type' => 'getOrderType',
        'limit_price' => 'getLimitPrice',
        'stop_price' => 'getStopPrice',
        'is_all_or_none' => 'getIsAllOrNone',
        'is_anonymous' => 'getIsAnonymous',
        'iceberg_quantity' => 'getIcebergQuantity',
        'min_quantity' => 'getMinQuantity',
        'avg_exec_price' => 'getAvgExecPrice',
        'last_exec_price' => 'getLastExecPrice',
        'source' => 'getSource',
        'time_in_force' => 'getTimeInForce',
        'gtd_date' => 'getGtdDate',
        'state' => 'getState',
        'rejection_reason' => 'getRejectionReason',
        'chain_id' => 'getChainId',
        'creation_time' => 'getCreationTime',
        'update_time' => 'getUpdateTime',
        'notes' => 'getNotes',
        'primary_route' => 'getPrimaryRoute',
        'secondary_route' => 'getSecondaryRoute',
        'order_route' => 'getOrderRoute',
        'venue_holding_order' => 'getVenueHoldingOrder',
        'comission_charged' => 'getComissionCharged',
        'exchange_order_id' => 'getExchangeOrderId',
        'is_significant_share_holder' => 'getIsSignificantShareHolder',
        'is_insider' => 'getIsInsider',
        'is_limit_offset_in_dollar' => 'getIsLimitOffsetInDollar',
        'user_id' => 'getUserId',
        'placement_commission' => 'getPlacementCommission',
        'legs' => 'getLegs',
        'strategy_type' => 'getStrategyType',
        'trigger_stop_price' => 'getTriggerStopPrice',
        'order_group_id' => 'getOrderGroupId',
        'order_class' => 'getOrderClass',
        'is_cross_zero' => 'getIsCrossZero'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('symbol_id', $data ?? [], null);
        $this->setIfExists('total_quantity', $data ?? [], null);
        $this->setIfExists('open_quantity', $data ?? [], null);
        $this->setIfExists('filled_quantity', $data ?? [], null);
        $this->setIfExists('canceled_quantity', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('order_type', $data ?? [], null);
        $this->setIfExists('limit_price', $data ?? [], null);
        $this->setIfExists('stop_price', $data ?? [], null);
        $this->setIfExists('is_all_or_none', $data ?? [], null);
        $this->setIfExists('is_anonymous', $data ?? [], null);
        $this->setIfExists('iceberg_quantity', $data ?? [], null);
        $this->setIfExists('min_quantity', $data ?? [], null);
        $this->setIfExists('avg_exec_price', $data ?? [], null);
        $this->setIfExists('last_exec_price', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('time_in_force', $data ?? [], null);
        $this->setIfExists('gtd_date', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('rejection_reason', $data ?? [], null);
        $this->setIfExists('chain_id', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('primary_route', $data ?? [], null);
        $this->setIfExists('secondary_route', $data ?? [], null);
        $this->setIfExists('order_route', $data ?? [], null);
        $this->setIfExists('venue_holding_order', $data ?? [], null);
        $this->setIfExists('comission_charged', $data ?? [], null);
        $this->setIfExists('exchange_order_id', $data ?? [], null);
        $this->setIfExists('is_significant_share_holder', $data ?? [], null);
        $this->setIfExists('is_insider', $data ?? [], null);
        $this->setIfExists('is_limit_offset_in_dollar', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('placement_commission', $data ?? [], null);
        $this->setIfExists('legs', $data ?? [], null);
        $this->setIfExists('strategy_type', $data ?? [], null);
        $this->setIfExists('trigger_stop_price', $data ?? [], null);
        $this->setIfExists('order_group_id', $data ?? [], null);
        $this->setIfExists('order_class', $data ?? [], null);
        $this->setIfExists('is_cross_zero', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {

        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets symbol_id
     *
     * @return int|null
     */
    public function getSymbolId()
    {
        return $this->container['symbol_id'];
    }

    /**
     * Sets symbol_id
     *
     * @param int|null $symbol_id symbol_id
     *
     * @return self
     */
    public function setSymbolId($symbol_id)
    {

        if (is_null($symbol_id)) {
            throw new \InvalidArgumentException('non-nullable symbol_id cannot be null');
        }

        $this->container['symbol_id'] = $symbol_id;

        return $this;
    }

    /**
     * Gets total_quantity
     *
     * @return int|null
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     *
     * @param int|null $total_quantity total_quantity
     *
     * @return self
     */
    public function setTotalQuantity($total_quantity)
    {

        if (is_null($total_quantity)) {
            throw new \InvalidArgumentException('non-nullable total_quantity cannot be null');
        }

        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets open_quantity
     *
     * @return int|null
     */
    public function getOpenQuantity()
    {
        return $this->container['open_quantity'];
    }

    /**
     * Sets open_quantity
     *
     * @param int|null $open_quantity open_quantity
     *
     * @return self
     */
    public function setOpenQuantity($open_quantity)
    {

        if (is_null($open_quantity)) {
            throw new \InvalidArgumentException('non-nullable open_quantity cannot be null');
        }

        $this->container['open_quantity'] = $open_quantity;

        return $this;
    }

    /**
     * Gets filled_quantity
     *
     * @return int|null
     */
    public function getFilledQuantity()
    {
        return $this->container['filled_quantity'];
    }

    /**
     * Sets filled_quantity
     *
     * @param int|null $filled_quantity filled_quantity
     *
     * @return self
     */
    public function setFilledQuantity($filled_quantity)
    {

        if (is_null($filled_quantity)) {
            throw new \InvalidArgumentException('non-nullable filled_quantity cannot be null');
        }

        $this->container['filled_quantity'] = $filled_quantity;

        return $this;
    }

    /**
     * Gets canceled_quantity
     *
     * @return int|null
     */
    public function getCanceledQuantity()
    {
        return $this->container['canceled_quantity'];
    }

    /**
     * Sets canceled_quantity
     *
     * @param int|null $canceled_quantity canceled_quantity
     *
     * @return self
     */
    public function setCanceledQuantity($canceled_quantity)
    {

        if (is_null($canceled_quantity)) {
            throw new \InvalidArgumentException('non-nullable canceled_quantity cannot be null');
        }

        $this->container['canceled_quantity'] = $canceled_quantity;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string|null
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string|null $side side
     *
     * @return self
     */
    public function setSide($side)
    {

        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }

        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string|null $order_type order_type
     *
     * @return self
     */
    public function setOrderType($order_type)
    {

        if (is_null($order_type)) {
            throw new \InvalidArgumentException('non-nullable order_type cannot be null');
        }

        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets limit_price
     *
     * @return string|null
     */
    public function getLimitPrice()
    {
        return $this->container['limit_price'];
    }

    /**
     * Sets limit_price
     *
     * @param string|null $limit_price limit_price
     *
     * @return self
     */
    public function setLimitPrice($limit_price)
    {

        if (is_null($limit_price)) {
            throw new \InvalidArgumentException('non-nullable limit_price cannot be null');
        }

        $this->container['limit_price'] = $limit_price;

        return $this;
    }

    /**
     * Gets stop_price
     *
     * @return string|null
     */
    public function getStopPrice()
    {
        return $this->container['stop_price'];
    }

    /**
     * Sets stop_price
     *
     * @param string|null $stop_price stop_price
     *
     * @return self
     */
    public function setStopPrice($stop_price)
    {

        if (is_null($stop_price)) {
            throw new \InvalidArgumentException('non-nullable stop_price cannot be null');
        }

        $this->container['stop_price'] = $stop_price;

        return $this;
    }

    /**
     * Gets is_all_or_none
     *
     * @return bool|null
     */
    public function getIsAllOrNone()
    {
        return $this->container['is_all_or_none'];
    }

    /**
     * Sets is_all_or_none
     *
     * @param bool|null $is_all_or_none is_all_or_none
     *
     * @return self
     */
    public function setIsAllOrNone($is_all_or_none)
    {

        if (is_null($is_all_or_none)) {
            throw new \InvalidArgumentException('non-nullable is_all_or_none cannot be null');
        }

        $this->container['is_all_or_none'] = $is_all_or_none;

        return $this;
    }

    /**
     * Gets is_anonymous
     *
     * @return bool|null
     */
    public function getIsAnonymous()
    {
        return $this->container['is_anonymous'];
    }

    /**
     * Sets is_anonymous
     *
     * @param bool|null $is_anonymous is_anonymous
     *
     * @return self
     */
    public function setIsAnonymous($is_anonymous)
    {

        if (is_null($is_anonymous)) {
            throw new \InvalidArgumentException('non-nullable is_anonymous cannot be null');
        }

        $this->container['is_anonymous'] = $is_anonymous;

        return $this;
    }

    /**
     * Gets iceberg_quantity
     *
     * @return string|null
     */
    public function getIcebergQuantity()
    {
        return $this->container['iceberg_quantity'];
    }

    /**
     * Sets iceberg_quantity
     *
     * @param string|null $iceberg_quantity iceberg_quantity
     *
     * @return self
     */
    public function setIcebergQuantity($iceberg_quantity)
    {

        if (is_null($iceberg_quantity)) {
            throw new \InvalidArgumentException('non-nullable iceberg_quantity cannot be null');
        }

        $this->container['iceberg_quantity'] = $iceberg_quantity;

        return $this;
    }

    /**
     * Gets min_quantity
     *
     * @return string|null
     */
    public function getMinQuantity()
    {
        return $this->container['min_quantity'];
    }

    /**
     * Sets min_quantity
     *
     * @param string|null $min_quantity min_quantity
     *
     * @return self
     */
    public function setMinQuantity($min_quantity)
    {

        if (is_null($min_quantity)) {
            throw new \InvalidArgumentException('non-nullable min_quantity cannot be null');
        }

        $this->container['min_quantity'] = $min_quantity;

        return $this;
    }

    /**
     * Gets avg_exec_price
     *
     * @return int|null
     */
    public function getAvgExecPrice()
    {
        return $this->container['avg_exec_price'];
    }

    /**
     * Sets avg_exec_price
     *
     * @param int|null $avg_exec_price avg_exec_price
     *
     * @return self
     */
    public function setAvgExecPrice($avg_exec_price)
    {

        if (is_null($avg_exec_price)) {
            throw new \InvalidArgumentException('non-nullable avg_exec_price cannot be null');
        }

        $this->container['avg_exec_price'] = $avg_exec_price;

        return $this;
    }

    /**
     * Gets last_exec_price
     *
     * @return string|null
     */
    public function getLastExecPrice()
    {
        return $this->container['last_exec_price'];
    }

    /**
     * Sets last_exec_price
     *
     * @param string|null $last_exec_price last_exec_price
     *
     * @return self
     */
    public function setLastExecPrice($last_exec_price)
    {

        if (is_null($last_exec_price)) {
            throw new \InvalidArgumentException('non-nullable last_exec_price cannot be null');
        }

        $this->container['last_exec_price'] = $last_exec_price;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {

        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets time_in_force
     *
     * @return string|null
     */
    public function getTimeInForce()
    {
        return $this->container['time_in_force'];
    }

    /**
     * Sets time_in_force
     *
     * @param string|null $time_in_force time_in_force
     *
     * @return self
     */
    public function setTimeInForce($time_in_force)
    {

        if (is_null($time_in_force)) {
            throw new \InvalidArgumentException('non-nullable time_in_force cannot be null');
        }

        $this->container['time_in_force'] = $time_in_force;

        return $this;
    }

    /**
     * Gets gtd_date
     *
     * @return string|null
     */
    public function getGtdDate()
    {
        return $this->container['gtd_date'];
    }

    /**
     * Sets gtd_date
     *
     * @param string|null $gtd_date gtd_date
     *
     * @return self
     */
    public function setGtdDate($gtd_date)
    {

        if (is_null($gtd_date)) {
            throw new \InvalidArgumentException('non-nullable gtd_date cannot be null');
        }

        $this->container['gtd_date'] = $gtd_date;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string|null
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string|null $rejection_reason rejection_reason
     *
     * @return self
     */
    public function setRejectionReason($rejection_reason)
    {

        if (is_null($rejection_reason)) {
            throw new \InvalidArgumentException('non-nullable rejection_reason cannot be null');
        }

        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }

    /**
     * Gets chain_id
     *
     * @return int|null
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param int|null $chain_id chain_id
     *
     * @return self
     */
    public function setChainId($chain_id)
    {

        if (is_null($chain_id)) {
            throw new \InvalidArgumentException('non-nullable chain_id cannot be null');
        }

        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time creation_time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {

        if (is_null($creation_time)) {
            throw new \InvalidArgumentException('non-nullable creation_time cannot be null');
        }

        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {

        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }

        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {

        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets primary_route
     *
     * @return string|null
     */
    public function getPrimaryRoute()
    {
        return $this->container['primary_route'];
    }

    /**
     * Sets primary_route
     *
     * @param string|null $primary_route primary_route
     *
     * @return self
     */
    public function setPrimaryRoute($primary_route)
    {

        if (is_null($primary_route)) {
            throw new \InvalidArgumentException('non-nullable primary_route cannot be null');
        }

        $this->container['primary_route'] = $primary_route;

        return $this;
    }

    /**
     * Gets secondary_route
     *
     * @return string|null
     */
    public function getSecondaryRoute()
    {
        return $this->container['secondary_route'];
    }

    /**
     * Sets secondary_route
     *
     * @param string|null $secondary_route secondary_route
     *
     * @return self
     */
    public function setSecondaryRoute($secondary_route)
    {

        if (is_null($secondary_route)) {
            throw new \InvalidArgumentException('non-nullable secondary_route cannot be null');
        }

        $this->container['secondary_route'] = $secondary_route;

        return $this;
    }

    /**
     * Gets order_route
     *
     * @return string|null
     */
    public function getOrderRoute()
    {
        return $this->container['order_route'];
    }

    /**
     * Sets order_route
     *
     * @param string|null $order_route order_route
     *
     * @return self
     */
    public function setOrderRoute($order_route)
    {

        if (is_null($order_route)) {
            throw new \InvalidArgumentException('non-nullable order_route cannot be null');
        }

        $this->container['order_route'] = $order_route;

        return $this;
    }

    /**
     * Gets venue_holding_order
     *
     * @return string|null
     */
    public function getVenueHoldingOrder()
    {
        return $this->container['venue_holding_order'];
    }

    /**
     * Sets venue_holding_order
     *
     * @param string|null $venue_holding_order venue_holding_order
     *
     * @return self
     */
    public function setVenueHoldingOrder($venue_holding_order)
    {

        if (is_null($venue_holding_order)) {
            throw new \InvalidArgumentException('non-nullable venue_holding_order cannot be null');
        }

        $this->container['venue_holding_order'] = $venue_holding_order;

        return $this;
    }

    /**
     * Gets comission_charged
     *
     * @return int|null
     */
    public function getComissionCharged()
    {
        return $this->container['comission_charged'];
    }

    /**
     * Sets comission_charged
     *
     * @param int|null $comission_charged comission_charged
     *
     * @return self
     */
    public function setComissionCharged($comission_charged)
    {

        if (is_null($comission_charged)) {
            throw new \InvalidArgumentException('non-nullable comission_charged cannot be null');
        }

        $this->container['comission_charged'] = $comission_charged;

        return $this;
    }

    /**
     * Gets exchange_order_id
     *
     * @return string|null
     */
    public function getExchangeOrderId()
    {
        return $this->container['exchange_order_id'];
    }

    /**
     * Sets exchange_order_id
     *
     * @param string|null $exchange_order_id exchange_order_id
     *
     * @return self
     */
    public function setExchangeOrderId($exchange_order_id)
    {

        if (is_null($exchange_order_id)) {
            throw new \InvalidArgumentException('non-nullable exchange_order_id cannot be null');
        }

        $this->container['exchange_order_id'] = $exchange_order_id;

        return $this;
    }

    /**
     * Gets is_significant_share_holder
     *
     * @return bool|null
     */
    public function getIsSignificantShareHolder()
    {
        return $this->container['is_significant_share_holder'];
    }

    /**
     * Sets is_significant_share_holder
     *
     * @param bool|null $is_significant_share_holder is_significant_share_holder
     *
     * @return self
     */
    public function setIsSignificantShareHolder($is_significant_share_holder)
    {

        if (is_null($is_significant_share_holder)) {
            throw new \InvalidArgumentException('non-nullable is_significant_share_holder cannot be null');
        }

        $this->container['is_significant_share_holder'] = $is_significant_share_holder;

        return $this;
    }

    /**
     * Gets is_insider
     *
     * @return bool|null
     */
    public function getIsInsider()
    {
        return $this->container['is_insider'];
    }

    /**
     * Sets is_insider
     *
     * @param bool|null $is_insider is_insider
     *
     * @return self
     */
    public function setIsInsider($is_insider)
    {

        if (is_null($is_insider)) {
            throw new \InvalidArgumentException('non-nullable is_insider cannot be null');
        }

        $this->container['is_insider'] = $is_insider;

        return $this;
    }

    /**
     * Gets is_limit_offset_in_dollar
     *
     * @return bool|null
     */
    public function getIsLimitOffsetInDollar()
    {
        return $this->container['is_limit_offset_in_dollar'];
    }

    /**
     * Sets is_limit_offset_in_dollar
     *
     * @param bool|null $is_limit_offset_in_dollar is_limit_offset_in_dollar
     *
     * @return self
     */
    public function setIsLimitOffsetInDollar($is_limit_offset_in_dollar)
    {

        if (is_null($is_limit_offset_in_dollar)) {
            throw new \InvalidArgumentException('non-nullable is_limit_offset_in_dollar cannot be null');
        }

        $this->container['is_limit_offset_in_dollar'] = $is_limit_offset_in_dollar;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets placement_commission
     *
     * @return string|null
     */
    public function getPlacementCommission()
    {
        return $this->container['placement_commission'];
    }

    /**
     * Sets placement_commission
     *
     * @param string|null $placement_commission placement_commission
     *
     * @return self
     */
    public function setPlacementCommission($placement_commission)
    {

        if (is_null($placement_commission)) {
            throw new \InvalidArgumentException('non-nullable placement_commission cannot be null');
        }

        $this->container['placement_commission'] = $placement_commission;

        return $this;
    }

    /**
     * Gets legs
     *
     * @return \SnapTrade\Model\StrategyOrderPlaceOrdersInnerLegsInner[]|null
     */
    public function getLegs()
    {
        return $this->container['legs'];
    }

    /**
     * Sets legs
     *
     * @param \SnapTrade\Model\StrategyOrderPlaceOrdersInnerLegsInner[]|null $legs legs
     *
     * @return self
     */
    public function setLegs($legs)
    {

        if (is_null($legs)) {
            throw new \InvalidArgumentException('non-nullable legs cannot be null');
        }

        $this->container['legs'] = $legs;

        return $this;
    }

    /**
     * Gets strategy_type
     *
     * @return string|null
     */
    public function getStrategyType()
    {
        return $this->container['strategy_type'];
    }

    /**
     * Sets strategy_type
     *
     * @param string|null $strategy_type strategy_type
     *
     * @return self
     */
    public function setStrategyType($strategy_type)
    {

        if (is_null($strategy_type)) {
            throw new \InvalidArgumentException('non-nullable strategy_type cannot be null');
        }

        $this->container['strategy_type'] = $strategy_type;

        return $this;
    }

    /**
     * Gets trigger_stop_price
     *
     * @return string|null
     */
    public function getTriggerStopPrice()
    {
        return $this->container['trigger_stop_price'];
    }

    /**
     * Sets trigger_stop_price
     *
     * @param string|null $trigger_stop_price trigger_stop_price
     *
     * @return self
     */
    public function setTriggerStopPrice($trigger_stop_price)
    {

        if (is_null($trigger_stop_price)) {
            throw new \InvalidArgumentException('non-nullable trigger_stop_price cannot be null');
        }

        $this->container['trigger_stop_price'] = $trigger_stop_price;

        return $this;
    }

    /**
     * Gets order_group_id
     *
     * @return int|null
     */
    public function getOrderGroupId()
    {
        return $this->container['order_group_id'];
    }

    /**
     * Sets order_group_id
     *
     * @param int|null $order_group_id order_group_id
     *
     * @return self
     */
    public function setOrderGroupId($order_group_id)
    {

        if (is_null($order_group_id)) {
            throw new \InvalidArgumentException('non-nullable order_group_id cannot be null');
        }

        $this->container['order_group_id'] = $order_group_id;

        return $this;
    }

    /**
     * Gets order_class
     *
     * @return string|null
     */
    public function getOrderClass()
    {
        return $this->container['order_class'];
    }

    /**
     * Sets order_class
     *
     * @param string|null $order_class order_class
     *
     * @return self
     */
    public function setOrderClass($order_class)
    {

        if (is_null($order_class)) {
            throw new \InvalidArgumentException('non-nullable order_class cannot be null');
        }

        $this->container['order_class'] = $order_class;

        return $this;
    }

    /**
     * Gets is_cross_zero
     *
     * @return bool|null
     */
    public function getIsCrossZero()
    {
        return $this->container['is_cross_zero'];
    }

    /**
     * Sets is_cross_zero
     *
     * @param bool|null $is_cross_zero is_cross_zero
     *
     * @return self
     */
    public function setIsCrossZero($is_cross_zero)
    {

        if (is_null($is_cross_zero)) {
            throw new \InvalidArgumentException('non-nullable is_cross_zero cannot be null');
        }

        $this->container['is_cross_zero'] = $is_cross_zero;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


