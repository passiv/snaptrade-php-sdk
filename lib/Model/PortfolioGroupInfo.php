<?php
/**
 * PortfolioGroupInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Model;

use \ArrayAccess;
use \SnapTrade\ObjectSerializer;

/**
 * PortfolioGroupInfo Class Doc Comment
 *
 * @category Class
 * @description Summary of all relevant information about a portfolio group.
 * @package  SnapTrade
 * @implements \ArrayAccess<string, mixed>
 */
class PortfolioGroupInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PortfolioGroupInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbols' => '\SnapTrade\Model\UniversalSymbol[]',
        'quotable_symbols' => '\SnapTrade\Model\UniversalSymbol[]',
        'balances' => '\SnapTrade\Model\Balance[]',
        'positions' => '\SnapTrade\Model\Position[]',
        'target_positions' => '\SnapTrade\Model\TargetAsset[]',
        'ideal_positions' => '\SnapTrade\Model\Position[]',
        'excluded_positions' => '\SnapTrade\Model\ExcludedAsset[]',
        'calculated_trades' => '\SnapTrade\Model\CalculatedTrade[]',
        'brokerage_authorizations' => '\SnapTrade\Model\BrokerageAuthorization[]',
        'accuracy' => 'float',
        'settings' => '\SnapTrade\Model\PortfolioGroupSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbols' => null,
        'quotable_symbols' => null,
        'balances' => null,
        'positions' => null,
        'target_positions' => null,
        'ideal_positions' => null,
        'excluded_positions' => null,
        'calculated_trades' => null,
        'brokerage_authorizations' => null,
        'accuracy' => null,
        'settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbols' => false,
		'quotable_symbols' => false,
		'balances' => false,
		'positions' => false,
		'target_positions' => false,
		'ideal_positions' => false,
		'excluded_positions' => false,
		'calculated_trades' => false,
		'brokerage_authorizations' => false,
		'accuracy' => false,
		'settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbols' => 'symbols',
        'quotable_symbols' => 'quotable_symbols',
        'balances' => 'balances',
        'positions' => 'positions',
        'target_positions' => 'target_positions',
        'ideal_positions' => 'ideal_positions',
        'excluded_positions' => 'excluded_positions',
        'calculated_trades' => 'calculated_trades',
        'brokerage_authorizations' => 'brokerage_authorizations',
        'accuracy' => 'accuracy',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbols' => 'setSymbols',
        'quotable_symbols' => 'setQuotableSymbols',
        'balances' => 'setBalances',
        'positions' => 'setPositions',
        'target_positions' => 'setTargetPositions',
        'ideal_positions' => 'setIdealPositions',
        'excluded_positions' => 'setExcludedPositions',
        'calculated_trades' => 'setCalculatedTrades',
        'brokerage_authorizations' => 'setBrokerageAuthorizations',
        'accuracy' => 'setAccuracy',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbols' => 'getSymbols',
        'quotable_symbols' => 'getQuotableSymbols',
        'balances' => 'getBalances',
        'positions' => 'getPositions',
        'target_positions' => 'getTargetPositions',
        'ideal_positions' => 'getIdealPositions',
        'excluded_positions' => 'getExcludedPositions',
        'calculated_trades' => 'getCalculatedTrades',
        'brokerage_authorizations' => 'getBrokerageAuthorizations',
        'accuracy' => 'getAccuracy',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('symbols', $data ?? [], null);
        $this->setIfExists('quotable_symbols', $data ?? [], null);
        $this->setIfExists('balances', $data ?? [], null);
        $this->setIfExists('positions', $data ?? [], null);
        $this->setIfExists('target_positions', $data ?? [], null);
        $this->setIfExists('ideal_positions', $data ?? [], null);
        $this->setIfExists('excluded_positions', $data ?? [], null);
        $this->setIfExists('calculated_trades', $data ?? [], null);
        $this->setIfExists('brokerage_authorizations', $data ?? [], null);
        $this->setIfExists('accuracy', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbols
     *
     * @return \SnapTrade\Model\UniversalSymbol[]|null
     */
    public function getSymbols()
    {
        return $this->container['symbols'];
    }

    /**
     * Sets symbols
     *
     * @param \SnapTrade\Model\UniversalSymbol[]|null $symbols symbols
     *
     * @return self
     */
    public function setSymbols($symbols)
    {

        if (is_null($symbols)) {
            throw new \InvalidArgumentException('non-nullable symbols cannot be null');
        }

        $this->container['symbols'] = $symbols;

        return $this;
    }

    /**
     * Gets quotable_symbols
     *
     * @return \SnapTrade\Model\UniversalSymbol[]|null
     */
    public function getQuotableSymbols()
    {
        return $this->container['quotable_symbols'];
    }

    /**
     * Sets quotable_symbols
     *
     * @param \SnapTrade\Model\UniversalSymbol[]|null $quotable_symbols quotable_symbols
     *
     * @return self
     */
    public function setQuotableSymbols($quotable_symbols)
    {

        if (is_null($quotable_symbols)) {
            throw new \InvalidArgumentException('non-nullable quotable_symbols cannot be null');
        }

        $this->container['quotable_symbols'] = $quotable_symbols;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \SnapTrade\Model\Balance[]|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param \SnapTrade\Model\Balance[]|null $balances balances
     *
     * @return self
     */
    public function setBalances($balances)
    {

        if (is_null($balances)) {
            throw new \InvalidArgumentException('non-nullable balances cannot be null');
        }

        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \SnapTrade\Model\Position[]|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \SnapTrade\Model\Position[]|null $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {

        if (is_null($positions)) {
            throw new \InvalidArgumentException('non-nullable positions cannot be null');
        }

        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets target_positions
     *
     * @return \SnapTrade\Model\TargetAsset[]|null
     */
    public function getTargetPositions()
    {
        return $this->container['target_positions'];
    }

    /**
     * Sets target_positions
     *
     * @param \SnapTrade\Model\TargetAsset[]|null $target_positions target_positions
     *
     * @return self
     */
    public function setTargetPositions($target_positions)
    {

        if (is_null($target_positions)) {
            throw new \InvalidArgumentException('non-nullable target_positions cannot be null');
        }

        $this->container['target_positions'] = $target_positions;

        return $this;
    }

    /**
     * Gets ideal_positions
     *
     * @return \SnapTrade\Model\Position[]|null
     */
    public function getIdealPositions()
    {
        return $this->container['ideal_positions'];
    }

    /**
     * Sets ideal_positions
     *
     * @param \SnapTrade\Model\Position[]|null $ideal_positions ideal_positions
     *
     * @return self
     */
    public function setIdealPositions($ideal_positions)
    {

        if (is_null($ideal_positions)) {
            throw new \InvalidArgumentException('non-nullable ideal_positions cannot be null');
        }

        $this->container['ideal_positions'] = $ideal_positions;

        return $this;
    }

    /**
     * Gets excluded_positions
     *
     * @return \SnapTrade\Model\ExcludedAsset[]|null
     */
    public function getExcludedPositions()
    {
        return $this->container['excluded_positions'];
    }

    /**
     * Sets excluded_positions
     *
     * @param \SnapTrade\Model\ExcludedAsset[]|null $excluded_positions excluded_positions
     *
     * @return self
     */
    public function setExcludedPositions($excluded_positions)
    {

        if (is_null($excluded_positions)) {
            throw new \InvalidArgumentException('non-nullable excluded_positions cannot be null');
        }

        $this->container['excluded_positions'] = $excluded_positions;

        return $this;
    }

    /**
     * Gets calculated_trades
     *
     * @return \SnapTrade\Model\CalculatedTrade[]|null
     */
    public function getCalculatedTrades()
    {
        return $this->container['calculated_trades'];
    }

    /**
     * Sets calculated_trades
     *
     * @param \SnapTrade\Model\CalculatedTrade[]|null $calculated_trades calculated_trades
     *
     * @return self
     */
    public function setCalculatedTrades($calculated_trades)
    {

        if (is_null($calculated_trades)) {
            throw new \InvalidArgumentException('non-nullable calculated_trades cannot be null');
        }

        $this->container['calculated_trades'] = $calculated_trades;

        return $this;
    }

    /**
     * Gets brokerage_authorizations
     *
     * @return \SnapTrade\Model\BrokerageAuthorization[]|null
     */
    public function getBrokerageAuthorizations()
    {
        return $this->container['brokerage_authorizations'];
    }

    /**
     * Sets brokerage_authorizations
     *
     * @param \SnapTrade\Model\BrokerageAuthorization[]|null $brokerage_authorizations brokerage_authorizations
     *
     * @return self
     */
    public function setBrokerageAuthorizations($brokerage_authorizations)
    {

        if (is_null($brokerage_authorizations)) {
            throw new \InvalidArgumentException('non-nullable brokerage_authorizations cannot be null');
        }

        $this->container['brokerage_authorizations'] = $brokerage_authorizations;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return float|null
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param float|null $accuracy accuracy
     *
     * @return self
     */
    public function setAccuracy($accuracy)
    {

        if (is_null($accuracy)) {
            throw new \InvalidArgumentException('non-nullable accuracy cannot be null');
        }

        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \SnapTrade\Model\PortfolioGroupSettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \SnapTrade\Model\PortfolioGroupSettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {

        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }

        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


