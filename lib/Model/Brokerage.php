<?php
/**
 * Brokerage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Model;

use \ArrayAccess;
use \SnapTrade\ObjectSerializer;

/**
 * Brokerage Class Doc Comment
 *
 * @category Class
 * @package  SnapTrade
 * @implements \ArrayAccess<string, mixed>
 */
class Brokerage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Brokerage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'display_name' => 'string',
        'description' => 'string',
        'aws_s3_logo_url' => 'string',
        'aws_s3_square_logo_url' => 'string',
        'open_url' => 'string',
        'slug' => 'string',
        'url' => 'string',
        'enabled' => 'bool',
        'maintenance_mode' => 'bool',
        'allows_fractional_units' => 'bool',
        'allows_trading' => 'bool',
        'has_reporting' => 'bool',
        'is_real_time_connection' => 'bool',
        'allows_trading_through_snaptrade_api' => 'bool',
        'is_scraping_integration' => 'bool',
        'default_currency' => 'string',
        'brokerage_type' => '\SnapTrade\Model\BrokerageType',
        'exchanges' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'display_name' => null,
        'description' => null,
        'aws_s3_logo_url' => 'url',
        'aws_s3_square_logo_url' => 'url',
        'open_url' => 'url',
        'slug' => null,
        'url' => 'url',
        'enabled' => null,
        'maintenance_mode' => null,
        'allows_fractional_units' => null,
        'allows_trading' => null,
        'has_reporting' => null,
        'is_real_time_connection' => null,
        'allows_trading_through_snaptrade_api' => null,
        'is_scraping_integration' => null,
        'default_currency' => 'uuid',
        'brokerage_type' => null,
        'exchanges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'display_name' => false,
		'description' => false,
		'aws_s3_logo_url' => false,
		'aws_s3_square_logo_url' => true,
		'open_url' => true,
		'slug' => false,
		'url' => false,
		'enabled' => false,
		'maintenance_mode' => false,
		'allows_fractional_units' => true,
		'allows_trading' => true,
		'has_reporting' => true,
		'is_real_time_connection' => false,
		'allows_trading_through_snaptrade_api' => true,
		'is_scraping_integration' => false,
		'default_currency' => false,
		'brokerage_type' => false,
		'exchanges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'display_name' => 'display_name',
        'description' => 'description',
        'aws_s3_logo_url' => 'aws_s3_logo_url',
        'aws_s3_square_logo_url' => 'aws_s3_square_logo_url',
        'open_url' => 'open_url',
        'slug' => 'slug',
        'url' => 'url',
        'enabled' => 'enabled',
        'maintenance_mode' => 'maintenance_mode',
        'allows_fractional_units' => 'allows_fractional_units',
        'allows_trading' => 'allows_trading',
        'has_reporting' => 'has_reporting',
        'is_real_time_connection' => 'is_real_time_connection',
        'allows_trading_through_snaptrade_api' => 'allows_trading_through_snaptrade_api',
        'is_scraping_integration' => 'is_scraping_integration',
        'default_currency' => 'default_currency',
        'brokerage_type' => 'brokerage_type',
        'exchanges' => 'exchanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'description' => 'setDescription',
        'aws_s3_logo_url' => 'setAwsS3LogoUrl',
        'aws_s3_square_logo_url' => 'setAwsS3SquareLogoUrl',
        'open_url' => 'setOpenUrl',
        'slug' => 'setSlug',
        'url' => 'setUrl',
        'enabled' => 'setEnabled',
        'maintenance_mode' => 'setMaintenanceMode',
        'allows_fractional_units' => 'setAllowsFractionalUnits',
        'allows_trading' => 'setAllowsTrading',
        'has_reporting' => 'setHasReporting',
        'is_real_time_connection' => 'setIsRealTimeConnection',
        'allows_trading_through_snaptrade_api' => 'setAllowsTradingThroughSnaptradeApi',
        'is_scraping_integration' => 'setIsScrapingIntegration',
        'default_currency' => 'setDefaultCurrency',
        'brokerage_type' => 'setBrokerageType',
        'exchanges' => 'setExchanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'description' => 'getDescription',
        'aws_s3_logo_url' => 'getAwsS3LogoUrl',
        'aws_s3_square_logo_url' => 'getAwsS3SquareLogoUrl',
        'open_url' => 'getOpenUrl',
        'slug' => 'getSlug',
        'url' => 'getUrl',
        'enabled' => 'getEnabled',
        'maintenance_mode' => 'getMaintenanceMode',
        'allows_fractional_units' => 'getAllowsFractionalUnits',
        'allows_trading' => 'getAllowsTrading',
        'has_reporting' => 'getHasReporting',
        'is_real_time_connection' => 'getIsRealTimeConnection',
        'allows_trading_through_snaptrade_api' => 'getAllowsTradingThroughSnaptradeApi',
        'is_scraping_integration' => 'getIsScrapingIntegration',
        'default_currency' => 'getDefaultCurrency',
        'brokerage_type' => 'getBrokerageType',
        'exchanges' => 'getExchanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('aws_s3_logo_url', $data ?? [], null);
        $this->setIfExists('aws_s3_square_logo_url', $data ?? [], null);
        $this->setIfExists('open_url', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('maintenance_mode', $data ?? [], null);
        $this->setIfExists('allows_fractional_units', $data ?? [], null);
        $this->setIfExists('allows_trading', $data ?? [], null);
        $this->setIfExists('has_reporting', $data ?? [], null);
        $this->setIfExists('is_real_time_connection', $data ?? [], null);
        $this->setIfExists('allows_trading_through_snaptrade_api', $data ?? [], null);
        $this->setIfExists('is_scraping_integration', $data ?? [], null);
        $this->setIfExists('default_currency', $data ?? [], null);
        $this->setIfExists('brokerage_type', $data ?? [], null);
        $this->setIfExists('exchanges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {

        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets aws_s3_logo_url
     *
     * @return string|null
     */
    public function getAwsS3LogoUrl()
    {
        return $this->container['aws_s3_logo_url'];
    }

    /**
     * Sets aws_s3_logo_url
     *
     * @param string|null $aws_s3_logo_url aws_s3_logo_url
     *
     * @return self
     */
    public function setAwsS3LogoUrl($aws_s3_logo_url)
    {

        if (is_null($aws_s3_logo_url)) {
            throw new \InvalidArgumentException('non-nullable aws_s3_logo_url cannot be null');
        }

        $this->container['aws_s3_logo_url'] = $aws_s3_logo_url;

        return $this;
    }

    /**
     * Gets aws_s3_square_logo_url
     *
     * @return string|null
     */
    public function getAwsS3SquareLogoUrl()
    {
        return $this->container['aws_s3_square_logo_url'];
    }

    /**
     * Sets aws_s3_square_logo_url
     *
     * @param string|null $aws_s3_square_logo_url aws_s3_square_logo_url
     *
     * @return self
     */
    public function setAwsS3SquareLogoUrl($aws_s3_square_logo_url)
    {

        if (is_null($aws_s3_square_logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'aws_s3_square_logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aws_s3_square_logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['aws_s3_square_logo_url'] = $aws_s3_square_logo_url;

        return $this;
    }

    /**
     * Gets open_url
     *
     * @return string|null
     */
    public function getOpenUrl()
    {
        return $this->container['open_url'];
    }

    /**
     * Sets open_url
     *
     * @param string|null $open_url open_url
     *
     * @return self
     */
    public function setOpenUrl($open_url)
    {

        if (is_null($open_url)) {
            array_push($this->openAPINullablesSetToNull, 'open_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['open_url'] = $open_url;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {

        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {

        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets maintenance_mode
     *
     * @return bool|null
     */
    public function getMaintenanceMode()
    {
        return $this->container['maintenance_mode'];
    }

    /**
     * Sets maintenance_mode
     *
     * @param bool|null $maintenance_mode maintenance_mode
     *
     * @return self
     */
    public function setMaintenanceMode($maintenance_mode)
    {

        if (is_null($maintenance_mode)) {
            throw new \InvalidArgumentException('non-nullable maintenance_mode cannot be null');
        }

        $this->container['maintenance_mode'] = $maintenance_mode;

        return $this;
    }

    /**
     * Gets allows_fractional_units
     *
     * @return bool|null
     */
    public function getAllowsFractionalUnits()
    {
        return $this->container['allows_fractional_units'];
    }

    /**
     * Sets allows_fractional_units
     *
     * @param bool|null $allows_fractional_units allows_fractional_units
     *
     * @return self
     */
    public function setAllowsFractionalUnits($allows_fractional_units)
    {

        if (is_null($allows_fractional_units)) {
            array_push($this->openAPINullablesSetToNull, 'allows_fractional_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allows_fractional_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['allows_fractional_units'] = $allows_fractional_units;

        return $this;
    }

    /**
     * Gets allows_trading
     *
     * @return bool|null
     */
    public function getAllowsTrading()
    {
        return $this->container['allows_trading'];
    }

    /**
     * Sets allows_trading
     *
     * @param bool|null $allows_trading allows_trading
     *
     * @return self
     */
    public function setAllowsTrading($allows_trading)
    {

        if (is_null($allows_trading)) {
            array_push($this->openAPINullablesSetToNull, 'allows_trading');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allows_trading', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['allows_trading'] = $allows_trading;

        return $this;
    }

    /**
     * Gets has_reporting
     *
     * @return bool|null
     */
    public function getHasReporting()
    {
        return $this->container['has_reporting'];
    }

    /**
     * Sets has_reporting
     *
     * @param bool|null $has_reporting has_reporting
     *
     * @return self
     */
    public function setHasReporting($has_reporting)
    {

        if (is_null($has_reporting)) {
            array_push($this->openAPINullablesSetToNull, 'has_reporting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_reporting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['has_reporting'] = $has_reporting;

        return $this;
    }

    /**
     * Gets is_real_time_connection
     *
     * @return bool|null
     */
    public function getIsRealTimeConnection()
    {
        return $this->container['is_real_time_connection'];
    }

    /**
     * Sets is_real_time_connection
     *
     * @param bool|null $is_real_time_connection is_real_time_connection
     *
     * @return self
     */
    public function setIsRealTimeConnection($is_real_time_connection)
    {

        if (is_null($is_real_time_connection)) {
            throw new \InvalidArgumentException('non-nullable is_real_time_connection cannot be null');
        }

        $this->container['is_real_time_connection'] = $is_real_time_connection;

        return $this;
    }

    /**
     * Gets allows_trading_through_snaptrade_api
     *
     * @return bool|null
     */
    public function getAllowsTradingThroughSnaptradeApi()
    {
        return $this->container['allows_trading_through_snaptrade_api'];
    }

    /**
     * Sets allows_trading_through_snaptrade_api
     *
     * @param bool|null $allows_trading_through_snaptrade_api allows_trading_through_snaptrade_api
     *
     * @return self
     */
    public function setAllowsTradingThroughSnaptradeApi($allows_trading_through_snaptrade_api)
    {

        if (is_null($allows_trading_through_snaptrade_api)) {
            array_push($this->openAPINullablesSetToNull, 'allows_trading_through_snaptrade_api');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allows_trading_through_snaptrade_api', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['allows_trading_through_snaptrade_api'] = $allows_trading_through_snaptrade_api;

        return $this;
    }

    /**
     * Gets is_scraping_integration
     *
     * @return bool|null
     */
    public function getIsScrapingIntegration()
    {
        return $this->container['is_scraping_integration'];
    }

    /**
     * Sets is_scraping_integration
     *
     * @param bool|null $is_scraping_integration is_scraping_integration
     *
     * @return self
     */
    public function setIsScrapingIntegration($is_scraping_integration)
    {

        if (is_null($is_scraping_integration)) {
            throw new \InvalidArgumentException('non-nullable is_scraping_integration cannot be null');
        }

        $this->container['is_scraping_integration'] = $is_scraping_integration;

        return $this;
    }

    /**
     * Gets default_currency
     *
     * @return string|null
     */
    public function getDefaultCurrency()
    {
        return $this->container['default_currency'];
    }

    /**
     * Sets default_currency
     *
     * @param string|null $default_currency default_currency
     *
     * @return self
     */
    public function setDefaultCurrency($default_currency)
    {

        if (is_null($default_currency)) {
            throw new \InvalidArgumentException('non-nullable default_currency cannot be null');
        }

        $this->container['default_currency'] = $default_currency;

        return $this;
    }

    /**
     * Gets brokerage_type
     *
     * @return \SnapTrade\Model\BrokerageType|null
     */
    public function getBrokerageType()
    {
        return $this->container['brokerage_type'];
    }

    /**
     * Sets brokerage_type
     *
     * @param \SnapTrade\Model\BrokerageType|null $brokerage_type brokerage_type
     *
     * @return self
     */
    public function setBrokerageType($brokerage_type)
    {

        if (is_null($brokerage_type)) {
            throw new \InvalidArgumentException('non-nullable brokerage_type cannot be null');
        }

        $this->container['brokerage_type'] = $brokerage_type;

        return $this;
    }

    /**
     * Gets exchanges
     *
     * @return mixed[]|null
     */
    public function getExchanges()
    {
        return $this->container['exchanges'];
    }

    /**
     * Sets exchanges
     *
     * @param mixed[]|null $exchanges List of exchange ID supported by brokerage
     *
     * @return self
     */
    public function setExchanges($exchanges)
    {

        if (is_null($exchanges)) {
            throw new \InvalidArgumentException('non-nullable exchanges cannot be null');
        }

        $this->container['exchanges'] = $exchanges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


