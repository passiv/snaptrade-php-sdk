<?php
/**
 * CryptoSpotTradingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SnapTrade
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


namespace SnapTrade\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\BodySummarizer;
use GuzzleHttp\Middleware;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Utils;
use SnapTrade\ApiException;
use SnapTrade\Configuration;
use SnapTrade\HeaderSelector;
use SnapTrade\ObjectSerializer;

class CryptoSpotTradingApi extends \SnapTrade\CustomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cryptoSpotCancelOrder' => [
            'application/json',
        ],
        'cryptoSpotPlaceOrder' => [
            'application/json',
        ],
        'cryptoSpotPreviewOrder' => [
            'application/json',
        ],
        'cryptoSpotQuote' => [
            'application/json',
        ],
        'cryptoSpotSymbols' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $clientOptions = [];
        if (!$config->getVerifySsl()) $clientOptions["verify"] = false;

        // Do not truncate error messages
        // https://github.com/guzzle/guzzle/issues/2185#issuecomment-800293420
        $stack = new HandlerStack(Utils::chooseHandler());
        $stack->push(Middleware::httpErrors(new BodySummarizer(10000)), 'http_errors');
        $stack->push(Middleware::redirect(), 'allow_redirects');
        $stack->push(Middleware::cookies(), 'cookies');
        $stack->push(Middleware::prepareBody(), 'prepare_body');
        $clientOptions["handler"] = $stack;

        $this->client = $client ?: new Client($clientOptions);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * For initializing request body parameter
     */
    private function setRequestBodyProperty(&$body, $property, $value) {
        if ($body === null) $body = [];
        // user did not pass in a value for this parameter
        if ($value === SENTINEL_VALUE) return;
        $body[$property] = $value;
    }

    /**
     * Operation cryptoSpotCancelOrder
     *
     * Cancel a crypto spot order.
     *
     * Cancels a cryptocurrency spot order in the specified account.
     *
     * @param  string $user_id user_id (required)
     * @param  string $user_secret user_secret (required)
     * @param  string $account_id account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest $trading_crypto_spot_cancel_order_request trading_crypto_spot_cancel_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotCancelOrder'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SnapTrade\Model\OrderUpdatedResponse|\SnapTrade\Model\Model400FailedRequestResponse
     */
    public function cryptoSpotCancelOrder(

        $brokerage_order_id,
        $user_id,
        $user_secret,
        $account_id,
        string $contentType = self::contentTypes['cryptoSpotCancelOrder'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "brokerage_order_id", $brokerage_order_id);
        $trading_crypto_spot_cancel_order_request = $_body;

        list($response) = $this->cryptoSpotCancelOrderWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, $contentType);
        return $response;
    }

    /**
     * Operation cryptoSpotCancelOrderWithHttpInfo
     *
     * Cancel a crypto spot order.
     *
     * Cancels a cryptocurrency spot order in the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest $trading_crypto_spot_cancel_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotCancelOrder'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SnapTrade\Model\OrderUpdatedResponse|\SnapTrade\Model\Model400FailedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cryptoSpotCancelOrderWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, string $contentType = self::contentTypes['cryptoSpotCancelOrder'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotCancelOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->cryptoSpotCancelOrderWithHttpInfo(
                        $user_id,
                        $user_secret,
                        $account_id,
                        $trading_crypto_spot_cancel_order_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SnapTrade\Model\OrderUpdatedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\OrderUpdatedResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\OrderUpdatedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SnapTrade\Model\Model400FailedRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\Model400FailedRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\Model400FailedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SnapTrade\Model\OrderUpdatedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\OrderUpdatedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\Model400FailedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cryptoSpotCancelOrderAsync
     *
     * Cancel a crypto spot order.
     *
     * Cancels a cryptocurrency spot order in the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest $trading_crypto_spot_cancel_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotCancelOrderAsync(

        $brokerage_order_id,
        $user_id,
        $user_secret,
        $account_id,
        string $contentType = self::contentTypes['cryptoSpotCancelOrder'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "brokerage_order_id", $brokerage_order_id);
        $trading_crypto_spot_cancel_order_request = $_body;

        return $this->cryptoSpotCancelOrderAsyncWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cryptoSpotCancelOrderAsyncWithHttpInfo
     *
     * Cancel a crypto spot order.
     *
     * Cancels a cryptocurrency spot order in the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest $trading_crypto_spot_cancel_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotCancelOrderAsyncWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, string $contentType = self::contentTypes['cryptoSpotCancelOrder'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        $returnType = '\SnapTrade\Model\OrderUpdatedResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotCancelOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cryptoSpotCancelOrder'
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest $trading_crypto_spot_cancel_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cryptoSpotCancelOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_cancel_order_request, string $contentType = self::contentTypes['cryptoSpotCancelOrder'][0])
    {

        // Check if $user_id is a string
        if ($user_id !== SENTINEL_VALUE && !is_string($user_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_id, true), gettype($user_id)));
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === SENTINEL_VALUE || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_id when calling cryptoSpotCancelOrder'
            );
        }
        // Check if $user_secret is a string
        if ($user_secret !== SENTINEL_VALUE && !is_string($user_secret)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_secret, true), gettype($user_secret)));
        }
        // verify the required parameter 'user_secret' is set
        if ($user_secret === SENTINEL_VALUE || (is_array($user_secret) && count($user_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_secret when calling cryptoSpotCancelOrder'
            );
        }
        // Check if $account_id is a string
        if ($account_id !== SENTINEL_VALUE && !is_string($account_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($account_id, true), gettype($account_id)));
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === SENTINEL_VALUE || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter account_id when calling cryptoSpotCancelOrder'
            );
        }
        if ($trading_crypto_spot_cancel_order_request !== SENTINEL_VALUE) {
            if (!($trading_crypto_spot_cancel_order_request instanceof \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest)) {
                if (!is_array($trading_crypto_spot_cancel_order_request))
                    throw new \InvalidArgumentException('"trading_crypto_spot_cancel_order_request" must be associative array or an instance of \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest CryptoSpotTradingApi.cryptoSpotCancelOrder.');
                else
                    $trading_crypto_spot_cancel_order_request = new \SnapTrade\Model\TradingCryptoSpotCancelOrderRequest($trading_crypto_spot_cancel_order_request);
            }
        }
        // verify the required parameter 'trading_crypto_spot_cancel_order_request' is set
        if ($trading_crypto_spot_cancel_order_request === SENTINEL_VALUE || (is_array($trading_crypto_spot_cancel_order_request) && count($trading_crypto_spot_cancel_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter trading_crypto_spot_cancel_order_request when calling cryptoSpotCancelOrder'
            );
        }


        $resourcePath = '/accounts/{accountId}/trading/crypto/spot/cancelOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($user_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_id,
                'userId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($user_secret !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_secret,
                'userSecret', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }


        // path params
        if ($account_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($trading_crypto_spot_cancel_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($trading_crypto_spot_cancel_order_request));
            } else {
                $httpBody = $trading_crypto_spot_cancel_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('clientId');
        if ($apiKey !== null) {
            $queryParams['clientId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Signature');
        if ($apiKey !== null) {
            $headers['Signature'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation cryptoSpotPlaceOrder
     *
     * Place a spot order on a crypto exchange
     *
     * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange.
     *
     * @param  string $user_id user_id (required)
     * @param  string $user_secret user_secret (required)
     * @param  string $account_id account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPlaceOrder'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SnapTrade\Model\OrderUpdatedResponse|\SnapTrade\Model\Model400FailedRequestResponse
     */
    public function cryptoSpotPlaceOrder(

        $symbol,
        $side,
        $type,
        $time_in_force,
        $amount,
        $user_id,
        $user_secret,
        $account_id,
        $limit_price = SENTINEL_VALUE,
        $stop_price = SENTINEL_VALUE,
        $post_only = SENTINEL_VALUE,
        $expiration_date = SENTINEL_VALUE,
        string $contentType = self::contentTypes['cryptoSpotPlaceOrder'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "symbol", $symbol);
        $this->setRequestBodyProperty($_body, "side", $side);
        $this->setRequestBodyProperty($_body, "type", $type);
        $this->setRequestBodyProperty($_body, "time_in_force", $time_in_force);
        $this->setRequestBodyProperty($_body, "amount", $amount);
        $this->setRequestBodyProperty($_body, "limit_price", $limit_price);
        $this->setRequestBodyProperty($_body, "stop_price", $stop_price);
        $this->setRequestBodyProperty($_body, "post_only", $post_only);
        $this->setRequestBodyProperty($_body, "expiration_date", $expiration_date);
        $trading_crypto_spot_place_order_request = $_body;

        list($response) = $this->cryptoSpotPlaceOrderWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType);
        return $response;
    }

    /**
     * Operation cryptoSpotPlaceOrderWithHttpInfo
     *
     * Place a spot order on a crypto exchange
     *
     * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPlaceOrder'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SnapTrade\Model\OrderUpdatedResponse|\SnapTrade\Model\Model400FailedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cryptoSpotPlaceOrderWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, string $contentType = self::contentTypes['cryptoSpotPlaceOrder'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotPlaceOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->cryptoSpotPlaceOrderWithHttpInfo(
                        $user_id,
                        $user_secret,
                        $account_id,
                        $trading_crypto_spot_place_order_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SnapTrade\Model\OrderUpdatedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\OrderUpdatedResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\OrderUpdatedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SnapTrade\Model\Model400FailedRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\Model400FailedRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\Model400FailedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SnapTrade\Model\OrderUpdatedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\OrderUpdatedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\Model400FailedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cryptoSpotPlaceOrderAsync
     *
     * Place a spot order on a crypto exchange
     *
     * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotPlaceOrderAsync(

        $symbol,
        $side,
        $type,
        $time_in_force,
        $amount,
        $user_id,
        $user_secret,
        $account_id,
        $limit_price = SENTINEL_VALUE,
        $stop_price = SENTINEL_VALUE,
        $post_only = SENTINEL_VALUE,
        $expiration_date = SENTINEL_VALUE,
        string $contentType = self::contentTypes['cryptoSpotPlaceOrder'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "symbol", $symbol);
        $this->setRequestBodyProperty($_body, "side", $side);
        $this->setRequestBodyProperty($_body, "type", $type);
        $this->setRequestBodyProperty($_body, "time_in_force", $time_in_force);
        $this->setRequestBodyProperty($_body, "amount", $amount);
        $this->setRequestBodyProperty($_body, "limit_price", $limit_price);
        $this->setRequestBodyProperty($_body, "stop_price", $stop_price);
        $this->setRequestBodyProperty($_body, "post_only", $post_only);
        $this->setRequestBodyProperty($_body, "expiration_date", $expiration_date);
        $trading_crypto_spot_place_order_request = $_body;

        return $this->cryptoSpotPlaceOrderAsyncWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cryptoSpotPlaceOrderAsyncWithHttpInfo
     *
     * Place a spot order on a crypto exchange
     *
     * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotPlaceOrderAsyncWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, string $contentType = self::contentTypes['cryptoSpotPlaceOrder'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        $returnType = '\SnapTrade\Model\OrderUpdatedResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotPlaceOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cryptoSpotPlaceOrder'
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cryptoSpotPlaceOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, string $contentType = self::contentTypes['cryptoSpotPlaceOrder'][0])
    {

        // Check if $user_id is a string
        if ($user_id !== SENTINEL_VALUE && !is_string($user_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_id, true), gettype($user_id)));
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === SENTINEL_VALUE || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_id when calling cryptoSpotPlaceOrder'
            );
        }
        // Check if $user_secret is a string
        if ($user_secret !== SENTINEL_VALUE && !is_string($user_secret)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_secret, true), gettype($user_secret)));
        }
        // verify the required parameter 'user_secret' is set
        if ($user_secret === SENTINEL_VALUE || (is_array($user_secret) && count($user_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_secret when calling cryptoSpotPlaceOrder'
            );
        }
        // Check if $account_id is a string
        if ($account_id !== SENTINEL_VALUE && !is_string($account_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($account_id, true), gettype($account_id)));
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === SENTINEL_VALUE || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter account_id when calling cryptoSpotPlaceOrder'
            );
        }
        if ($trading_crypto_spot_place_order_request !== SENTINEL_VALUE) {
            if (!($trading_crypto_spot_place_order_request instanceof \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest)) {
                if (!is_array($trading_crypto_spot_place_order_request))
                    throw new \InvalidArgumentException('"trading_crypto_spot_place_order_request" must be associative array or an instance of \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest CryptoSpotTradingApi.cryptoSpotPlaceOrder.');
                else
                    $trading_crypto_spot_place_order_request = new \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest($trading_crypto_spot_place_order_request);
            }
        }
        // verify the required parameter 'trading_crypto_spot_place_order_request' is set
        if ($trading_crypto_spot_place_order_request === SENTINEL_VALUE || (is_array($trading_crypto_spot_place_order_request) && count($trading_crypto_spot_place_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter trading_crypto_spot_place_order_request when calling cryptoSpotPlaceOrder'
            );
        }


        $resourcePath = '/accounts/{accountId}/trading/crypto/spot/placeOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($user_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_id,
                'userId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($user_secret !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_secret,
                'userSecret', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }


        // path params
        if ($account_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($trading_crypto_spot_place_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($trading_crypto_spot_place_order_request));
            } else {
                $httpBody = $trading_crypto_spot_place_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('clientId');
        if ($apiKey !== null) {
            $queryParams['clientId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Signature');
        if ($apiKey !== null) {
            $headers['Signature'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation cryptoSpotPreviewOrder
     *
     * Preview a crypto spot order
     *
     * Previews a cryptocurrency spot order using the specified account.
     *
     * @param  string $user_id user_id (required)
     * @param  string $user_secret user_secret (required)
     * @param  string $account_id account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPreviewOrder'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SnapTrade\Model\CryptoSpotOrderPreview|\SnapTrade\Model\Model400FailedRequestResponse
     */
    public function cryptoSpotPreviewOrder(

        $symbol,
        $side,
        $type,
        $time_in_force,
        $amount,
        $user_id,
        $user_secret,
        $account_id,
        $limit_price = SENTINEL_VALUE,
        $stop_price = SENTINEL_VALUE,
        $post_only = SENTINEL_VALUE,
        $expiration_date = SENTINEL_VALUE,
        string $contentType = self::contentTypes['cryptoSpotPreviewOrder'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "symbol", $symbol);
        $this->setRequestBodyProperty($_body, "side", $side);
        $this->setRequestBodyProperty($_body, "type", $type);
        $this->setRequestBodyProperty($_body, "time_in_force", $time_in_force);
        $this->setRequestBodyProperty($_body, "amount", $amount);
        $this->setRequestBodyProperty($_body, "limit_price", $limit_price);
        $this->setRequestBodyProperty($_body, "stop_price", $stop_price);
        $this->setRequestBodyProperty($_body, "post_only", $post_only);
        $this->setRequestBodyProperty($_body, "expiration_date", $expiration_date);
        $trading_crypto_spot_place_order_request = $_body;

        list($response) = $this->cryptoSpotPreviewOrderWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType);
        return $response;
    }

    /**
     * Operation cryptoSpotPreviewOrderWithHttpInfo
     *
     * Preview a crypto spot order
     *
     * Previews a cryptocurrency spot order using the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPreviewOrder'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SnapTrade\Model\CryptoSpotOrderPreview|\SnapTrade\Model\Model400FailedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cryptoSpotPreviewOrderWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, string $contentType = self::contentTypes['cryptoSpotPreviewOrder'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotPreviewOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->cryptoSpotPreviewOrderWithHttpInfo(
                        $user_id,
                        $user_secret,
                        $account_id,
                        $trading_crypto_spot_place_order_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SnapTrade\Model\CryptoSpotOrderPreview' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\CryptoSpotOrderPreview' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\CryptoSpotOrderPreview', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SnapTrade\Model\Model400FailedRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\Model400FailedRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\Model400FailedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SnapTrade\Model\CryptoSpotOrderPreview';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\CryptoSpotOrderPreview',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\Model400FailedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cryptoSpotPreviewOrderAsync
     *
     * Preview a crypto spot order
     *
     * Previews a cryptocurrency spot order using the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPreviewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotPreviewOrderAsync(

        $symbol,
        $side,
        $type,
        $time_in_force,
        $amount,
        $user_id,
        $user_secret,
        $account_id,
        $limit_price = SENTINEL_VALUE,
        $stop_price = SENTINEL_VALUE,
        $post_only = SENTINEL_VALUE,
        $expiration_date = SENTINEL_VALUE,
        string $contentType = self::contentTypes['cryptoSpotPreviewOrder'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "symbol", $symbol);
        $this->setRequestBodyProperty($_body, "side", $side);
        $this->setRequestBodyProperty($_body, "type", $type);
        $this->setRequestBodyProperty($_body, "time_in_force", $time_in_force);
        $this->setRequestBodyProperty($_body, "amount", $amount);
        $this->setRequestBodyProperty($_body, "limit_price", $limit_price);
        $this->setRequestBodyProperty($_body, "stop_price", $stop_price);
        $this->setRequestBodyProperty($_body, "post_only", $post_only);
        $this->setRequestBodyProperty($_body, "expiration_date", $expiration_date);
        $trading_crypto_spot_place_order_request = $_body;

        return $this->cryptoSpotPreviewOrderAsyncWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cryptoSpotPreviewOrderAsyncWithHttpInfo
     *
     * Preview a crypto spot order
     *
     * Previews a cryptocurrency spot order using the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPreviewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotPreviewOrderAsyncWithHttpInfo($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, string $contentType = self::contentTypes['cryptoSpotPreviewOrder'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        $returnType = '\SnapTrade\Model\CryptoSpotOrderPreview';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotPreviewOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cryptoSpotPreviewOrder'
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest $trading_crypto_spot_place_order_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotPreviewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cryptoSpotPreviewOrderRequest($user_id, $user_secret, $account_id, $trading_crypto_spot_place_order_request, string $contentType = self::contentTypes['cryptoSpotPreviewOrder'][0])
    {

        // Check if $user_id is a string
        if ($user_id !== SENTINEL_VALUE && !is_string($user_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_id, true), gettype($user_id)));
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === SENTINEL_VALUE || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_id when calling cryptoSpotPreviewOrder'
            );
        }
        // Check if $user_secret is a string
        if ($user_secret !== SENTINEL_VALUE && !is_string($user_secret)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_secret, true), gettype($user_secret)));
        }
        // verify the required parameter 'user_secret' is set
        if ($user_secret === SENTINEL_VALUE || (is_array($user_secret) && count($user_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_secret when calling cryptoSpotPreviewOrder'
            );
        }
        // Check if $account_id is a string
        if ($account_id !== SENTINEL_VALUE && !is_string($account_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($account_id, true), gettype($account_id)));
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === SENTINEL_VALUE || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter account_id when calling cryptoSpotPreviewOrder'
            );
        }
        if ($trading_crypto_spot_place_order_request !== SENTINEL_VALUE) {
            if (!($trading_crypto_spot_place_order_request instanceof \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest)) {
                if (!is_array($trading_crypto_spot_place_order_request))
                    throw new \InvalidArgumentException('"trading_crypto_spot_place_order_request" must be associative array or an instance of \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest CryptoSpotTradingApi.cryptoSpotPreviewOrder.');
                else
                    $trading_crypto_spot_place_order_request = new \SnapTrade\Model\TradingCryptoSpotPlaceOrderRequest($trading_crypto_spot_place_order_request);
            }
        }
        // verify the required parameter 'trading_crypto_spot_place_order_request' is set
        if ($trading_crypto_spot_place_order_request === SENTINEL_VALUE || (is_array($trading_crypto_spot_place_order_request) && count($trading_crypto_spot_place_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter trading_crypto_spot_place_order_request when calling cryptoSpotPreviewOrder'
            );
        }


        $resourcePath = '/accounts/{accountId}/trading/crypto/spot/previewOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($user_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_id,
                'userId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($user_secret !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_secret,
                'userSecret', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }


        // path params
        if ($account_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($trading_crypto_spot_place_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($trading_crypto_spot_place_order_request));
            } else {
                $httpBody = $trading_crypto_spot_place_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('clientId');
        if ($apiKey !== null) {
            $queryParams['clientId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Signature');
        if ($apiKey !== null) {
            $headers['Signature'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation cryptoSpotQuote
     *
     * Get a cryptocurrency spot market quote
     *
     * Gets a quote for the specified account.
     *
     * @param  string $user_id user_id (required)
     * @param  string $user_secret user_secret (required)
     * @param  string $account_id account_id (required)
     * @param  string $base base (required)
     * @param  string $quote quote (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotQuote'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SnapTrade\Model\CryptoSpotQuote|\SnapTrade\Model\Model400FailedRequestResponse
     */
    public function cryptoSpotQuote(
        $user_id,
        $user_secret,
        $account_id,
        $base,
        $quote,

        string $contentType = self::contentTypes['cryptoSpotQuote'][0]
    )
    {

        list($response) = $this->cryptoSpotQuoteWithHttpInfo($user_id, $user_secret, $account_id, $base, $quote, $contentType);
        return $response;
    }

    /**
     * Operation cryptoSpotQuoteWithHttpInfo
     *
     * Get a cryptocurrency spot market quote
     *
     * Gets a quote for the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (required)
     * @param  string $quote (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotQuote'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SnapTrade\Model\CryptoSpotQuote|\SnapTrade\Model\Model400FailedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cryptoSpotQuoteWithHttpInfo($user_id, $user_secret, $account_id, $base, $quote, string $contentType = self::contentTypes['cryptoSpotQuote'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotQuoteRequest($user_id, $user_secret, $account_id, $base, $quote, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->cryptoSpotQuoteWithHttpInfo(
                        $user_id,
                        $user_secret,
                        $account_id,
                        $base,
                        $quote,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SnapTrade\Model\CryptoSpotQuote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\CryptoSpotQuote' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\CryptoSpotQuote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SnapTrade\Model\Model400FailedRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\Model400FailedRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\Model400FailedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SnapTrade\Model\CryptoSpotQuote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\CryptoSpotQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\Model400FailedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cryptoSpotQuoteAsync
     *
     * Get a cryptocurrency spot market quote
     *
     * Gets a quote for the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (required)
     * @param  string $quote (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotQuote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotQuoteAsync(
        $user_id,
        $user_secret,
        $account_id,
        $base,
        $quote,

        string $contentType = self::contentTypes['cryptoSpotQuote'][0]
    )
    {

        return $this->cryptoSpotQuoteAsyncWithHttpInfo($user_id, $user_secret, $account_id, $base, $quote, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cryptoSpotQuoteAsyncWithHttpInfo
     *
     * Get a cryptocurrency spot market quote
     *
     * Gets a quote for the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (required)
     * @param  string $quote (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotQuote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotQuoteAsyncWithHttpInfo($user_id, $user_secret, $account_id, $base, $quote, string $contentType = self::contentTypes['cryptoSpotQuote'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        $returnType = '\SnapTrade\Model\CryptoSpotQuote';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotQuoteRequest($user_id, $user_secret, $account_id, $base, $quote, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cryptoSpotQuote'
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (required)
     * @param  string $quote (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotQuote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cryptoSpotQuoteRequest($user_id, $user_secret, $account_id, $base, $quote, string $contentType = self::contentTypes['cryptoSpotQuote'][0])
    {

        // Check if $user_id is a string
        if ($user_id !== SENTINEL_VALUE && !is_string($user_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_id, true), gettype($user_id)));
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === SENTINEL_VALUE || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_id when calling cryptoSpotQuote'
            );
        }
        // Check if $user_secret is a string
        if ($user_secret !== SENTINEL_VALUE && !is_string($user_secret)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_secret, true), gettype($user_secret)));
        }
        // verify the required parameter 'user_secret' is set
        if ($user_secret === SENTINEL_VALUE || (is_array($user_secret) && count($user_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_secret when calling cryptoSpotQuote'
            );
        }
        // Check if $account_id is a string
        if ($account_id !== SENTINEL_VALUE && !is_string($account_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($account_id, true), gettype($account_id)));
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === SENTINEL_VALUE || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter account_id when calling cryptoSpotQuote'
            );
        }
        // Check if $base is a string
        if ($base !== SENTINEL_VALUE && !is_string($base)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($base, true), gettype($base)));
        }
        // verify the required parameter 'base' is set
        if ($base === SENTINEL_VALUE || (is_array($base) && count($base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter base when calling cryptoSpotQuote'
            );
        }
        // Check if $quote is a string
        if ($quote !== SENTINEL_VALUE && !is_string($quote)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($quote, true), gettype($quote)));
        }
        // verify the required parameter 'quote' is set
        if ($quote === SENTINEL_VALUE || (is_array($quote) && count($quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter quote when calling cryptoSpotQuote'
            );
        }


        $resourcePath = '/accounts/{accountId}/trading/crypto/spot/quote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($user_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_id,
                'userId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($user_secret !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_secret,
                'userSecret', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($base !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $base,
                'base', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($quote !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $quote,
                'quote', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }


        // path params
        if ($account_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('clientId');
        if ($apiKey !== null) {
            $queryParams['clientId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Signature');
        if ($apiKey !== null) {
            $headers['Signature'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation cryptoSpotSymbols
     *
     * Search crypto spot symbols
     *
     * Searches cryptocurrency spot symbols accessible to the specified account.
     *
     * @param  string $user_id user_id (required)
     * @param  string $user_secret user_secret (required)
     * @param  string $account_id account_id (required)
     * @param  string $base base (optional)
     * @param  string $quote quote (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotSymbols'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SnapTrade\Model\TradingCryptoSpotSymbols200Response|\SnapTrade\Model\Model400FailedRequestResponse
     */
    public function cryptoSpotSymbols(
        $user_id,
        $user_secret,
        $account_id,
        $base = SENTINEL_VALUE,
        $quote = SENTINEL_VALUE,

        string $contentType = self::contentTypes['cryptoSpotSymbols'][0]
    )
    {

        list($response) = $this->cryptoSpotSymbolsWithHttpInfo($user_id, $user_secret, $account_id, $base, $quote, $contentType);
        return $response;
    }

    /**
     * Operation cryptoSpotSymbolsWithHttpInfo
     *
     * Search crypto spot symbols
     *
     * Searches cryptocurrency spot symbols accessible to the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (optional)
     * @param  string $quote (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotSymbols'] to see the possible values for this operation
     *
     * @throws \SnapTrade\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SnapTrade\Model\TradingCryptoSpotSymbols200Response|\SnapTrade\Model\Model400FailedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cryptoSpotSymbolsWithHttpInfo($user_id, $user_secret, $account_id, $base = null, $quote = null, string $contentType = self::contentTypes['cryptoSpotSymbols'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotSymbolsRequest($user_id, $user_secret, $account_id, $base, $quote, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->cryptoSpotSymbolsWithHttpInfo(
                        $user_id,
                        $user_secret,
                        $account_id,
                        $base,
                        $quote,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SnapTrade\Model\TradingCryptoSpotSymbols200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\TradingCryptoSpotSymbols200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\TradingCryptoSpotSymbols200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SnapTrade\Model\Model400FailedRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SnapTrade\Model\Model400FailedRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SnapTrade\Model\Model400FailedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SnapTrade\Model\TradingCryptoSpotSymbols200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\TradingCryptoSpotSymbols200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SnapTrade\Model\Model400FailedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cryptoSpotSymbolsAsync
     *
     * Search crypto spot symbols
     *
     * Searches cryptocurrency spot symbols accessible to the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (optional)
     * @param  string $quote (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotSymbols'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotSymbolsAsync(
        $user_id,
        $user_secret,
        $account_id,
        $base = SENTINEL_VALUE,
        $quote = SENTINEL_VALUE,

        string $contentType = self::contentTypes['cryptoSpotSymbols'][0]
    )
    {

        return $this->cryptoSpotSymbolsAsyncWithHttpInfo($user_id, $user_secret, $account_id, $base, $quote, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cryptoSpotSymbolsAsyncWithHttpInfo
     *
     * Search crypto spot symbols
     *
     * Searches cryptocurrency spot symbols accessible to the specified account.
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (optional)
     * @param  string $quote (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotSymbols'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cryptoSpotSymbolsAsyncWithHttpInfo($user_id, $user_secret, $account_id, $base = null, $quote = null, string $contentType = self::contentTypes['cryptoSpotSymbols'][0], \SnapTrade\RequestOptions $requestOptions = new \SnapTrade\RequestOptions())
    {
        $returnType = '\SnapTrade\Model\TradingCryptoSpotSymbols200Response';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->cryptoSpotSymbolsRequest($user_id, $user_secret, $account_id, $base, $quote, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cryptoSpotSymbols'
     *
     * @param  string $user_id (required)
     * @param  string $user_secret (required)
     * @param  string $account_id (required)
     * @param  string $base (optional)
     * @param  string $quote (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cryptoSpotSymbols'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cryptoSpotSymbolsRequest($user_id, $user_secret, $account_id, $base = SENTINEL_VALUE, $quote = SENTINEL_VALUE, string $contentType = self::contentTypes['cryptoSpotSymbols'][0])
    {

        // Check if $user_id is a string
        if ($user_id !== SENTINEL_VALUE && !is_string($user_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_id, true), gettype($user_id)));
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === SENTINEL_VALUE || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_id when calling cryptoSpotSymbols'
            );
        }
        // Check if $user_secret is a string
        if ($user_secret !== SENTINEL_VALUE && !is_string($user_secret)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($user_secret, true), gettype($user_secret)));
        }
        // verify the required parameter 'user_secret' is set
        if ($user_secret === SENTINEL_VALUE || (is_array($user_secret) && count($user_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter user_secret when calling cryptoSpotSymbols'
            );
        }
        // Check if $account_id is a string
        if ($account_id !== SENTINEL_VALUE && !is_string($account_id)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($account_id, true), gettype($account_id)));
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === SENTINEL_VALUE || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter account_id when calling cryptoSpotSymbols'
            );
        }
        // Check if $base is a string
        if ($base !== SENTINEL_VALUE && !is_string($base)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($base, true), gettype($base)));
        }
        // Check if $quote is a string
        if ($quote !== SENTINEL_VALUE && !is_string($quote)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($quote, true), gettype($quote)));
        }


        $resourcePath = '/accounts/{accountId}/trading/crypto/spot/symbols';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($user_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_id,
                'userId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($user_secret !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $user_secret,
                'userSecret', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }
        if ($base !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $base,
                'base', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($quote !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $quote,
                'quote', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }


        // path params
        if ($account_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('clientId');
        if ($apiKey !== null) {
            $queryParams['clientId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Signature');
        if ($apiKey !== null) {
            $headers['Signature'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
